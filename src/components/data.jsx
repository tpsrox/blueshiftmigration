var d = {
  JobName: "VMA_CookRCA_Event17_Derived_Prod_Daily_Backfill",
  JobSettingsVersion: "1.1",
  Owner: "ropandey@microsoft.com",
  JobDescription: null,
  Tags: null,
  MaxJobInstances: 8,
  LongTermRetries: 0,
  LongTermRetryDelay: "00:00:00",
  IsDebug: false,
  AppendUtcIndicator: false,
  AdvancedMode: true,
  JobPriority: 990,
  TokensPerJob: 70,
  PercentAllocation: 5,
  AllocationType: 1,
  DegreeOfParallelism: 0,
  AutoTokenAdjustment: true,
  JobScheduleSettings: {
    StartTime: "2016-11-01T00:00:00",
    ScheduleType: 2,
    FrequencySettings: {
      PeriodBetweenJobs: "01:00:00",
      LagTime: "00:00:00",
      BackFill: false,
      EndTime: "2016-05-08T00:00:00",
      Monthly: false,
    },
    FeedSettings: {
      EndTime: "2016-11-17T00:00:00",
      Monthly: false,
      BackFill: true,
      MaxSteps: 10,
      StepSize: "1.00:00:00",
      OldestFirst: false,
      SubmissionDelay: "00:15:00",
      UpdateType: 2,
      FeedInfos: [
        {
          StreamsPerWindow: 1,
          EntityName:
            "Microsoft.Cloud.Public.Production.Fa.OsVhddiskEventTableV1",
          PartitionStart: "[start]",
          PartitionEnd: "[endMinusOne]",
          PartitionSelector: "[today]",
          ManualStream: null,
          Collapsed: false,
        },
        {
          StreamsPerWindow: 1,
          EntityName:
            "Microsoft.Cloud.Public.Production.XHealth.DiskFailureXStoreTriageV1",
          PartitionStart: "[start]",
          PartitionEnd: "[endMinusOne]",
          PartitionSelector: "[today]",
          ManualStream: null,
          Collapsed: false,
        },
      ],
    },
  },
  ProcessingActivities: [
    {
      Script:
        '//Script GUID:3e42bc25-1769-4709-a8cb-c308f670682e\r\n//Used for tracking history\r\nMODULE @"/shares/AzureComputeInsights/ComputeInsights/SDK/ComputeInsightsSDK.module" AS ComputeInsights;\r\nMODULE @"/shares/AzureAnalytics.Prod/Sdk/AzureAnalytics1.3.module" AS AzureAnalytics;\r\n#DECLARE startDateTime string = @@startDateTime@@;\r\n#DECLARE starthour string = DateTime.Parse(@startDateTime).Hour.ToString();\r\n#DECLARE starttime string = DateTime.Parse(@startDateTime).ToString();\r\n#DECLARE endtime string = DateTime.Parse(@starttime).AddDays(1).AddSeconds(-1).ToString();\r\n#DECLARE minutesInADay string = "1440";\r\n\r\n#DECLARE Env string = "@@Environment@@";\r\n#DECLARE IsStageRun bool = @Env.IndexOf("Stage", StringComparison.InvariantCultureIgnoreCase)>=0;\r\n#DECLARE IsMonthlyRun bool = bool.Parse("@@IsMonthlyRun@@");\r\n#DECLARE BuildVersion string = "@@BuildVersion@@";\r\n#DECLARE UseLocalResource bool = "@@UseLocalResource@@".StartsWith("@@") ? false : bool.Parse("@@UseLocalResource@@");\r\n\r\n// Paths for libraries, modules and views.\r\n#DECLARE VmaBasePath string = @"/users/_sangamsvcacct/VMAvailabilityHBInstrumentation";\r\n\r\n#IF(@UseLocalResource)\r\n    #DECLARE rootPath string = @"..\\..\\..\\..\\out\\debug-AMD64";\r\n    #DECLARE vmaLibPath string = string.Format(@"{0}\\VMALib\\VMALib.dll", @rootPath);\r\n#ELSE\r\n    #DECLARE rootPath string = string.Format("{0}/{1}/{2}", @VmaBasePath, @Env, @BuildVersion);\r\n    #DECLARE vmaLibPath string = string.Format("{0}/Ref/VMALib.dll", @rootPath);\r\n#ENDIF\r\n\r\n#DECLARE ExecutionLogStreamName string = @"/shares/AzureAnalytics.Dev/AzureAnalytics.Dev.PublishedData/computeanalytics/ExecutionLog/" + @@Environment@@\r\n            + DateTime.UtcNow.ToString("/yyyy/MM/") + "SeedDate_"\r\n            + DateTime.Parse(@@startDateTime@@).ToString("yyyy_MM_dd_HH-")\r\n            + DateTime.Parse(@@endDateTime@@).ToString("yyyy_MM_dd_HH-")\r\n            + "VMA_CookInfo_Event17_Derived-Daily-ExecutionDate_"\r\n            + DateTime.UtcNow.ToString("yyyy_MM_dd_HH_mm_ss_fff\'.ss\'");\r\n\r\n#IF(NOT @IsMonthlyRun)\r\n    #DECLARE xdiskstart string = DateTime.Parse(@startDateTime).ToString();//Same as start and end.\r\n    #DECLARE xdiskend string = DateTime.Parse(@starttime).AddDays(1).AddHours(2).ToString(); //Read in two extra hours \r\n#ELSE\r\n    #DECLARE xdiskstart string = DateTime.Now.AddDays(-1).Date.ToString("M/d/yyyy");//Use the most recent.\r\n    #DECLARE xdiskend string = DateTime.Parse(@xdiskstart).AddDays(1).ToString();\r\n#ENDIF\r\n\r\n#IF(@IsStageRun)\r\n    #DECLARE notificationEntity string = "computeanalytics.statistics_e17byRCA2Stage";\r\n    #DECLARE publishLocation string = @"/shares/AzureAnalytics.Dev/AzureAnalytics.Dev.PublishedData/Microsoft.Azure.Compute/Event17DerivedTable11Stage1";\r\n    #DECLARE publishLocationForKusto string = @"/shares/AzureAnalytics.Dev/AzureAnalytics.Dev.PublishedData/Microsoft.Azure.Compute/Event17DerivedTable11Stage1ForKusto";\r\n#ELSE\r\n    #DECLARE notificationEntity string = "computeanalytics.statistics_e17byRCA2";\r\n    #DECLARE publishLocation string = @"/shares/AzureAnalytics.Dev/AzureAnalytics.Dev.PublishedData/Microsoft.Azure.Compute/Event17DerivedTable11";\r\n    #DECLARE publishLocationForKusto string = @"/shares/AzureAnalytics.Dev/AzureAnalytics.Dev.PublishedData/Microsoft.Azure.Compute/Event17DerivedTable11ForKusto";\r\n#ENDIF\r\n\r\nREFERENCE @vmaLibPath;\r\n\r\n#DECLARE OsVhddiskEntity string = @"Microsoft.Cloud.Public.Production.Fa.OsVhddiskEventTableV1";\r\n\r\nAzureAnalytics.Initialize(entity = @OsVhddiskEntity);\r\n\r\nfaOsTableV1 = AzureAnalytics.LoadStream\r\n     (\r\n         entity = @OsVhddiskEntity,\r\n         startDateTime = @starttime,\r\n         endDateTime = @endtime\r\n     );\r\n\r\n#SET OsVhddiskEntity = @"Microsoft.Cloud.Public.Production.Fa.OsVhddiskEventTableV2";\r\n\r\nAzureAnalytics.Initialize(entity = @OsVhddiskEntity);\r\n\r\nfaOsTableV2 = AzureAnalytics.LoadStream\r\n     (\r\n         entity = @OsVhddiskEntity,\r\n         startDateTime = @starttime,\r\n         endDateTime = @endtime\r\n     );\r\n\r\n#SET OsVhddiskEntity = @"Microsoft.Cloud.Mooncake.Production.Fa.OsVhddiskEventTableV1";\r\n\r\nAzureAnalytics.Initialize(entity = @OsVhddiskEntity);\r\n\r\nmoonFaOsTable = AzureAnalytics.LoadStream\r\n     (\r\n         entity = @OsVhddiskEntity,\r\n         startDateTime = @starttime,\r\n         endDateTime = @endtime\r\n     );\r\n\r\n#SET OsVhddiskEntity = @"Microsoft.Cloud.Fairfax.Production.Fa.OsVhddiskEventTableV1";\r\n\r\nAzureAnalytics.Initialize(entity = @OsVhddiskEntity);\r\n\r\nffFaOsTable = AzureAnalytics.LoadStream\r\n     (\r\n         entity = @OsVhddiskEntity,\r\n         startDateTime = @starttime,\r\n         endDateTime = @endtime\r\n     );\r\n\r\n#SET OsVhddiskEntity = @"Microsoft.Cloud.Blackforest.Production.Fa.OsVhddiskEventTableV1";\r\n\r\nbfFaOsTable = AzureAnalytics.LoadStream\r\n     (\r\n         entity = @OsVhddiskEntity,\r\n         startDateTime = @starttime,\r\n         endDateTime = @endtime\r\n     );\r\n\r\nfaOsTable =\r\n    SELECT * FROM faOsTableV1\r\n    UNION ALL\r\n    SELECT *, "" AS RowKey FROM faOsTableV2\r\n    UNION ALL\r\n    SELECT * FROM moonFaOsTable\r\n    UNION ALL\r\n    SELECT * FROM ffFaOsTable\r\n    UNION ALL\r\n    SELECT * FROM bfFaOsTable;\r\n\r\n#DECLARE DiskFailureEntity string = @"Microsoft.Cloud.Public.Production.XHealth.DiskFailureXStoreTriageV1";\r\n\r\nAzureAnalytics.Initialize(\r\n    entity = @DiskFailureEntity);\r\n\r\nxdisktable = AzureAnalytics.LoadStream(\r\n    //entity = "Microsoft.Cloud.xdiskreportsdiskfailuresnapshotv2",\r\n    entity = @DiskFailureEntity,\r\n    startDateTime = @xdiskstart,\r\n    endDateTime = @xdiskend);\r\n\r\nfaOsTable_projected = \r\nSELECT\r\n    PreciseTimeStamp.GetValueOrDefault(DateTime.MaxValue) AS PreciseTimeStamp,\r\n    NodeIdentity,\r\n    DataCenter,\r\n    Cluster,\r\n    Helper.GetCode(ParamBinary1) AS err_code,\r\n    Helper.GetHttpCode(ParamBinary1) AS http_code,\r\n    "Event" + EventId.ToString() + "_" + Helper.GetCode(ParamBinary1) AS err_type,\r\n    EventId,\r\n    ParamStr1\r\n    FROM faOsTable;\r\n\r\nevent17_table = \r\n    SELECT * \r\n    FROM faOsTable_projected\r\n    WHERE EventId == 17 OR EventId == 21;\r\n\r\nevent2And3_table =\r\n    SELECT *, Helper.GetBlob(ParamStr1) AS E2Blob\r\n    FROM faOsTable_projected\r\n    WHERE EventId == 2 OR EventId == 3 OR EventId == 29;\r\n\r\n\r\nevent17_derived = SELECT\r\n    event17_table.NodeIdentity AS E17_nodes,//0\r\n    event17_table.PreciseTimeStamp AS E17_timestamp,//1\r\n    event2And3_table.NodeIdentity AS E2_nodes,//2\r\n    event2And3_table.PreciseTimeStamp AS E2_timestamp,//3\r\n    event2And3_table.err_type AS E2_error_type,//4\r\n    event17_table.DataCenter AS E17_datacenter,//5\r\n    event17_table.Cluster AS E17_cluster,//6\r\n    Helper.SplitVhdPathV1(event17_table.ParamStr1) AS VhdPath,//7\r\n    event2And3_table.DataCenter AS E2_datacenter,//8\r\n    event2And3_table.Cluster AS E2_cluster,//9\r\n    event17_table.err_code AS E17_errorcode,//10\r\n    event2And3_table.http_code AS E2_http,//11\r\n    event2And3_table.err_code AS E2_ntstatus,//12\r\n    event2And3_table.err_code AS E2_errcode,//13\r\n    E2Blob,//14\r\n    event17_table.ParamStr1 AS E17VhdFull,//15\r\n    event2And3_table.EventId AS E2_eventid,//16\r\n    event17_table.EventId AS E17_eventid//17\r\nFROM event17_table LEFT OUTER JOIN event2And3_table\r\nON event17_table.NodeIdentity == event2And3_table.NodeIdentity\r\nAND event17_table.Cluster == event2And3_table.Cluster;\r\n\r\nevent17_derived = SELECT *,\r\n    //((Helper.GetDuration(E2_timestamp, E17_timestamp) <= 10 AND Helper.GetDuration(E2_timestamp, E17_timestamp) >= -2 AND (VhdPath.Contains(E2Blob)) OR E2Blob.Contains(VhdPath)) ? 1 : 0) AS InWindow;\r\n    (\r\n        (\r\n            Helper.GetDuration(E2_timestamp, E17_timestamp) <= 10 AND Helper.GetDuration(E2_timestamp, E17_timestamp) >= -2 && !string.IsNullOrEmpty(E2Blob) &&\r\n             (\r\n                 VhdPath.Contains(E2Blob)  OR E2Blob.Contains(VhdPath)\r\n             )\r\n        ) ? 1 : 0\r\n    ) AS InWindow;\r\n\r\nevent17_projected = SELECT\r\n    E17_nodes,//0\r\n    E17_errorcode,//1\r\n    E17_timestamp,//2\r\n    E17_datacenter,//3\r\n    E17_cluster,//4\r\n    VhdPath,//5\r\n    E2_http,//6\r\n    E2_ntstatus,//7\r\n    ((InWindow == 1 AND E2_error_type == "Event2_C0000196") ? 1:0) AS Event2_C0000196_Count,//8\r\n    ((InWindow == 1 AND E2_error_type == "Event2_C0000120")? 1:0) AS Event2_C0000120_Count,//9\r\n    ((InWindow == 1 AND E2_error_type == "Event2_C00000A3")? 1:0) AS Event2_C00000A3_Count,//10\r\n    ((InWindow == 1 AND E2_error_type == "Event3_C000000E")? 1:0) AS Event3_C000000E_Count,//11\r\n    ((InWindow == 1 AND E2_error_type == "Event3_C0000044")? 1:0) AS Event3_C0000044_Count,//12\r\n    E2Blob,//13\r\n    E17VhdFull,//14\r\n    E2_eventid,//15\r\n    E17_eventid,//16\r\n    E2_timestamp,//17\r\n    InWindow//18\r\nFROM event17_derived;\r\n\r\nevent17_reduced = REDUCE event17_projected PRODUCE\r\n    E17_NodeIp,\r\n    E17_ErrorCode,\r\n    E17_timestamp,\r\n    E17_DataCenter,\r\n    E17_Cluster,\r\n    VhdPath,\r\n    Event2_C0000196_Count,\r\n    Event2_C0000120_Count,\r\n    Event2_C00000A3_Count,\r\n    Event3_C000000E_Count,\r\n    Event3_C0000044_Count,\r\n    RCAL2,\r\n    EventList,\r\n    E17VhdFull,\r\n    E17EventId\r\nUSING EventsAroundReducer ON\r\n    E17_nodes,\r\n    E17_datacenter,\r\n    E17_cluster,\r\n    VhdPath,\r\n    E17_errorcode,\r\n    E17_timestamp,\r\n    E17VhdFull;\r\n\r\n//Replace this grouping by the reducer.\r\nevent17_grouped = SELECT\r\n    E17_nodes AS E17_NodeIp,\r\n    E17_errorcode AS E17_ErrorCode,\r\n    E17_timestamp,\r\n    E17_datacenter AS E17_DataCenter,\r\n    E17_cluster AS E17_Cluster,\r\n    VhdPath,\r\n    SUM(Event2_C0000196_Count) AS Event2_C0000196_Count,\r\n    SUM(Event2_C0000120_Count) AS Event2_C0000120_Count,\r\n    SUM(Event2_C00000A3_Count) AS Event2_C00000A3_Count,\r\n    SUM(Event3_C000000E_Count) AS Event3_C000000E_Count,\r\n    SUM(Event3_C0000044_Count) AS Event3_C0000044_Count\r\nFROM event17_projected\r\nGROUP BY\r\n    E17_NodeIp,\r\n    E17_DataCenter,\r\n    E17_Cluster,\r\n    VhdPath,\r\n    E17_ErrorCode,\r\n    E17_timestamp;\r\n\r\n//Since we are reading from snapshot, we need to be careful about possible duplicates.\r\n\r\nxdisktable_distinct = SELECT DISTINCT * FROM xdisktable;\r\n\r\nxdisktableProjected  = SELECT * ,\r\n    TimeStamp.Value.ToUniversalTime() AS xdisk_Time,\r\n    (String)Helper.GetCode(ParamBinary1) AS XdiskErrorCode\r\n FROM xdisktable_distinct;\r\n\r\nxdisktableProjected = SELECT * FROM xdisktableProjected WHERE xdisk_Time > DateTime.Parse(@starttime) AND xdisk_Time < DateTime.Parse(@endtime);\r\n\r\nxdisktableProjected = SELECT\r\n    *,\r\n    ROW_NUMBER() OVER (PARTITION BY PartitionKey, RowKey ORDER BY TriageTimestamp DESC) AS RowNumber\r\nFROM xdisktableProjected\r\nHAVING RowNumber == 1;\r\n\r\nevent17_xdisk_joined = SELECT\r\n        E17_NodeIp,\r\n        E17_ErrorCode,\r\n        E17_timestamp,\r\n        E17_DataCenter,\r\n        E17_Cluster,\r\n        VhdPath,\r\n        Event2_C0000196_Count,\r\n        Event2_C0000120_Count,\r\n        Event2_C00000A3_Count,\r\n        Event3_C000000E_Count,\r\n        Event3_C0000044_Count,\r\n        DateTime.Parse(xdisktableProjected.TriageCategory) AS xdisk_timestamp,\r\n        //xdisktableProjected.TriageCategory AS xdisk_timestamp_string,\r\n        xdisktableProjected.ClientIP,\r\n        xdisktableProjected.BlobPath,\r\n        xdisktableProjected.TriageReason + "_" +  xdisktableProjected.TriageCategory AS RCA,\r\n        xdisktableProjected.VhdAppCluster AS Cluster,\r\n        //Helper.ConvertClusterToDC(TriageGroup.Substring),//(0,3) AS DataCenter,\r\n        (VhdAppCluster == null ? null : (String)VhdAppCluster.Substring(0,3)) AS DataCenter,\r\n        XdiskErrorCode,\r\n        StorageTenant AS StorageCluster,\r\n        AccountName,\r\n        RCAL2,\r\n        EventList,\r\n        xdisk_Time,\r\n        E17EventId\r\n    FROM event17_reduced FULL OUTER JOIN xdisktableProjected ON\r\n    event17_reduced.E17_NodeIp == xdisktableProjected.ClientIP AND\r\n    event17_reduced.E17_Cluster == xdisktableProjected.VhdAppCluster AND\r\n    //event17_reduced.VhdPath == xdisktableProjected.BlobPath AND\r\n    event17_reduced.E17VhdFull == xdisktableProjected.ParamStr1 AND\r\n    event17_reduced.E17_timestamp == xdisktableProjected.xdisk_Time;\r\n\r\nevent17_xdisk_projected = SELECT\r\n    Helper.RemoveNull(E17_NodeIp, ClientIP) AS E17_NodeIp,\r\n    Helper.RemoveNull(E17_ErrorCode, "NA") AS E17_ErrorCode,\r\n    Helper.RemoveNullDateTime(E17_timestamp, xdisk_Time) AS E17_timestamp,\r\n    Helper.RemoveNull(E17_DataCenter, DataCenter) AS E17_DataCenter,\r\n    Helper.RemoveNull(E17_Cluster, Cluster) AS E17_Cluster,\r\n    Helper.RemoveNull(VhdPath, BlobPath) AS VhdPath,\r\n    Helper.RemoveNullLong(Event2_C0000196_Count) AS Event2_C0000196_Count,\r\n    Helper.RemoveNullLong(Event2_C0000120_Count) AS Event2_C0000120_Count,\r\n    Helper.RemoveNullLong(Event2_C00000A3_Count) AS Event2_C00000A3_Count,\r\n    Helper.RemoveNullLong(Event3_C000000E_Count) AS Event3_C000000E_Count,\r\n    Helper.RemoveNullLong(Event3_C0000044_Count) AS Event3_C0000044_Count,\r\n    xdisk_timestamp,\r\n    ClientIP,\r\n    BlobPath,\r\n    (RCA == "_") ? "Unknown_dataNotTriaged" : RCA AS RCA,\r\n    Cluster,\r\n    DataCenter,\r\n    XdiskErrorCode,\r\n    StorageCluster,\r\n    AccountName,\r\n    RCAL2,\r\n    EventList,\r\n    E17EventId\r\nFROM event17_xdisk_joined;\r\n\r\nnodeId2Ip =\r\n    EXTRACT clusterRaw :string,\r\n            nodeIpRaw : string,\r\n            nodeIdRaw : string\r\n    FROM @"/users/_sangamsvcacct/Azuredbg/BladeIDtoIPMappings.csv"\r\n    USING DefaultTextExtractor(delimiter: \',\', silent:true);\r\n\r\naugNodeId2Ip =\r\n    SELECT\r\n        clusterRaw AS cluster,\r\n        nodeIdRaw.Trim().ToLower() AS nodeId,\r\n        nodeIpRaw.Trim() AS nodeIp\r\n    FROM nodeId2Ip;\r\n\r\nevent17_with_node_ids = SELECT\r\n        augNodeId2Ip.nodeId AS NodeId,\r\n        E17_NodeIp,\r\n        E17_Cluster,\r\n        E17_DataCenter,\r\n        E17_ErrorCode,\r\n        E17_timestamp,\r\n        VhdPath,\r\n        Event2_C0000196_Count AS ReadWrite_TooManySessionsOnNetwork,\r\n        Event2_C0000120_Count AS ReadWrite_CantDelete,\r\n        Event2_C00000A3_Count AS ReadWrite_InvalidAttributes,\r\n        Event3_C000000E_Count AS CommunicationProtocol_NoFile,\r\n        Event3_C0000044_Count AS CommunicationProtocol_InsuffucuentQuota,\r\n        (E17EventId == 21 ? "TempDiskSpillover_" + RCA : RCA) AS RCA,\r\n        RCAL2,\r\n        XdiskErrorCode,\r\n        StorageCluster,\r\n        Helper.CombineRCA(RCA, RCAL2) AS TriageSummary,\r\n        "" AS Classification,\r\n        AccountName,\r\n        EventList,\r\n        "false" AS UsedNetworkingAgent6,\r\n        E17EventId\r\n        //"" AS NetworkingRCA\r\n    FROM event17_xdisk_projected LEFT OUTER JOIN augNodeId2Ip\r\n    ON event17_xdisk_projected.E17_NodeIp == augNodeId2Ip.nodeIp\r\n    AND event17_xdisk_projected.E17_Cluster == augNodeId2Ip.cluster;\r\n\r\n//Since this is a small table, we can process one day at a time.\r\n\r\nComputeInsights.PublishStream(\r\n\tinput = event17_with_node_ids,\r\n\tstreamPath = @publishLocation,\r\n\tstartDateTime = @startDateTime,\r\n\texpiryInDays = "180",\r\n\tperiodInMinutes = "1440",\r\n\tclusteredBy = "E17_Cluster",\r\n    sortedBy = "E17_timestamp"\r\n    );\r\n\r\n//Publishing a duplicated stream to a different location to differentiate Kusto uploads from Lens\r\n\r\nComputeInsights.PublishStream(\r\n\tinput = event17_with_node_ids,\r\n\tstreamPath = @publishLocationForKusto,\r\n\tstartDateTime = @startDateTime,\r\n\texpiryInDays = "180",\r\n\tperiodInMinutes = "1440",\r\n\tclusteredBy = "E17_Cluster",\r\n    sortedBy = "E17_timestamp"\r\n    );\r\n\r\ntest = SELECT COUNT() AS Total FROM event17_with_node_ids;\r\nOUTPUT test TO SSTREAM @ExecutionLogStreamName;\r\n\r\nnotification_for_networking = SELECT\r\n    RCA AS RCALevel1,\r\n    (long?)COUNT() AS e17_original,\r\n    (long?)-1 AS  post_networking,\r\n    (long?)-1 AS networkRCAAdded\r\nFROM event17_with_node_ids;\r\n\r\n//Reusing old networking stats for notification.\r\nAzureAnalytics.PublishStream(\r\n    entity = @notificationEntity,\r\n    startDateTime = @startDateTime,\r\n    periodInMinutes = @minutesInADay,\r\n    input = notification_for_networking);\r\n\r\n\r\n \r\n #CS \r\n using System;\r\nusing System.Collections.Generic;\r\nusing System.IO;\r\nusing System.Text;\r\nusing ScopeRuntime;\r\n\r\npublic class EventsAroundReducer : Reducer\r\n{\r\n    //Private variables that log the IO failure information.\r\n    private Dictionary<String, int> allEvents;\r\n    //The RCAs are in order of priority.\r\n    private String[] rcas = {"XStore.throttling_customer_pushing_more_data_than_allowed_limit#NTStatus:C00000A3#HTTP:503",\r\n                "XStore.DidntReceiveFullPacket_FrontEndsBusy#NTStatus:C0000010#HTTP:206",\r\n                "Compute.VMTurnOffAttempt_ZeroCustomerImpact#NTStatus:81700099#HTTP:403",\r\n                "Networking.suspect#NTStatus:C000020D",\r\n                "XStore.RequestNotCompleted#NTStatus:C00000B5#HTTP:500"};\r\n    private bool[] isRCAPresent;\r\n\r\n    public EventsAroundReducer()\r\n    {\r\n                \r\n        allEvents = new Dictionary<String, int>();\r\n        isRCAPresent = new bool[rcas.Length];\r\n    }\r\n\r\n    public override bool IsRecursive\r\n    {\r\n        get { return true; }\r\n    }\r\n\r\n    public override Schema Produces(string[] requestedColumns, string[] args, Schema input)\r\n    {\r\n        return new Schema(\r\n                "E17_NodeIp," +\r\n                "E17_ErrorCode," +\r\n                "E17_timestamp:DateTime," +\r\n                "E17_DataCenter," +\r\n                "E17_Cluster," +\r\n                "VhdPath," +\r\n                "Event2_C0000196_Count:long," +\r\n                "Event2_C0000120_Count:long," +\r\n                "Event2_C00000A3_Count:long," +\r\n                "Event3_C000000E_Count:long," +\r\n                "Event3_C0000044_Count:long," +\r\n                "RCAL2," + \r\n                "EventList," +\r\n                "E17VhdFull," +\r\n                "E17EventId:int"\r\n            );\r\n    }\r\n    \r\n    public override IEnumerable<Row> Reduce(RowSet input, Row outputRow, string[] args)\r\n    {\r\n        string e17NodeIp = "", e17ErrorCode = "", e17DataCenter = "", e17Cluster = "", vhdPath = "", e2_ntstatus = "", rca = "", eventList = "", e17VhdFull = "",  e2Blob = "";\r\n        int e2_http = -1, inWindow = 0;\r\n        long event2_C0000196_Count = 0, event2_C0000120_Count = 0, event2_C00000A3_Count = 0, event3_C000000E_Count = 0, event3_C0000044_Count = 0;\r\n        int e2Eventid = 0, e17Eventid = 0, e3Count = 0;\r\n        DateTime e2Timestamp = DateTime.MinValue, e17Timestamp = DateTime.MinValue;//The Roman empire still thrives.\r\n\r\n        bool firstRow = true, foundE29 = false, foundE2 = false;\r\n        string currentRca = "None";\r\n        DateTime minE29Time = DateTime.MaxValue; //Did we at least colonize 10% of the galaxy yet?\r\n        DateTime minE2Time = DateTime.MaxValue;\r\n        DateTime singularE3Time = DateTime.MaxValue;\r\n        \r\n        foreach (Row inputRow in input.Rows) //Main loop\r\n        {\r\n            //For this row, get all information.\r\n            if(firstRow)\r\n            {\r\n                e17NodeIp = inputRow[0].String;\r\n                e17ErrorCode = inputRow[1].String;\r\n                e17Timestamp = inputRow[2].DateTime;\r\n                e17DataCenter = inputRow[3].String;\r\n                e17Cluster = inputRow[4].String;\r\n                vhdPath = inputRow[5].String;\r\n                e17VhdFull = inputRow[14].String;\r\n                e17Eventid = inputRow[16].Integer;\r\n                firstRow = false;\r\n            }\r\n            e2_http = inputRow[6].Integer;\r\n            e2_ntstatus = inputRow[7].String;\r\n            e2Blob = inputRow[13].String;\r\n            e2Eventid = inputRow[15].Integer;\r\n            e2Timestamp = inputRow[17].DateTime;\r\n            inWindow = inputRow[18].Integer;\r\n            if (inWindow == 1) //Only process RCA if inWindow condition is satisfied.\r\n            {\r\n                //We are looking for the signature of one Event3 after the Event17 followed by one Event29.\r\n                //For this, we will look for the minimum E29 timestamp after the Event17.\r\n                //And if there is only one Event3, we will check that it lies between the Event17 and Event29.\r\n                if (e2Eventid == 29 && e2Timestamp > e17Timestamp)\r\n                {\r\n                    foundE29 = true;\r\n                    if (e2Timestamp < minE29Time)//Find the minimum E29 time in case there were multiple.\r\n                        minE29Time = e2Timestamp;\r\n                }\r\n                else if (e2Eventid == 3 && e2Timestamp > e17Timestamp) //Only looking for E3s after Event17s.\r\n                {\r\n                    e3Count++;\r\n                    singularE3Time = e2Timestamp;//We are only interested in cases where there was exactly one Event3.\r\n                }\r\n                else if (e2Eventid == 2 && e2Timestamp > e17Timestamp)\r\n                {\r\n                    if (e2Timestamp < minE2Time)\r\n                        minE2Time = e2Timestamp;//When did the first Event2 happen?\r\n                }\r\n\r\n                if (e2Blob != null && e17VhdFull != null && (e17VhdFull.Contains(e2Blob) || e2Blob.Contains(e17VhdFull)) && (e2Eventid == 2 || e2Eventid == 3))\r\n                {\r\n                    FindRDOSRCA(e2_ntstatus, e2_http);\r\n                }\r\n            }\r\n\r\n            event2_C0000196_Count += Convert.ToInt64(inputRow[8].String);\r\n            event2_C0000120_Count += Convert.ToInt64(inputRow[9].String);\r\n            event2_C00000A3_Count += Convert.ToInt64(inputRow[10].String);\r\n            event3_C000000E_Count += Convert.ToInt64(inputRow[11].String);\r\n            event3_C0000044_Count += Convert.ToInt64(inputRow[12].String);\r\n        }\r\n\r\n        double e3timeInterval = Math.Abs((e17Timestamp - singularE3Time).TotalMinutes);\r\n\r\n        //if (e3Count == 1 && foundE29 && singularE3Time < minE29Time && minE2Time > minE29Time && e3timeInterval >= 2)\r\n        if (e3Count == 1 && foundE29 && singularE3Time < minE29Time && e3timeInterval >= 1.7)\r\n        //if (e3Count == 1 && foundE29 && singularE3Time < minE29Time) //Special case RCA. Takes higher priority than other RDOS RCAs.\r\n            currentRca = "Compute.SocketDisconnectBlocked";\r\n        else\r\n            currentRca = FinalizeRCA();\r\n\r\n        if (e17Eventid == 21)\r\n            currentRca = "TempDiskSpillover_" + currentRca;\r\n\r\n        eventList = string.Join(";", allEvents.Select(x => x.Key + "=" + x.Value.ToString()).ToArray());\r\n        outputRow[0].Set(e17NodeIp);\r\n        outputRow[1].Set(e17ErrorCode);\r\n        outputRow[2].Set(e17Timestamp);\r\n        outputRow[3].Set(e17DataCenter);\r\n        outputRow[4].Set(e17Cluster);\r\n        outputRow[5].Set(vhdPath);\r\n        outputRow[6].Set(event2_C0000196_Count);\r\n        outputRow[7].Set(event2_C0000120_Count);\r\n        outputRow[8].Set(event2_C00000A3_Count);\r\n        outputRow[9].Set(event3_C000000E_Count);\r\n        outputRow[10].Set(event3_C0000044_Count);\r\n        outputRow[11].Set(currentRca);\r\n        outputRow[12].Set(eventList);\r\n        outputRow[13].Set(e17VhdFull);\r\n        outputRow[14].Set(e17Eventid);\r\n        yield return outputRow;\r\n    }\r\n\r\n    //Searches through the RCA list and outputs the first one that was present for that E17. This is because the RCAs are in order of priority\r\n    private string FinalizeRCA()\r\n    {\r\n        for (int i = 0; i < isRCAPresent.Length; i++)\r\n        {\r\n            if (isRCAPresent[i])\r\n            {\r\n                return rcas[i];//Return the first one you find.\r\n            }\r\n        }\r\n        return "None";\r\n    }\r\n\r\n    //Customized logic specifying our suspected problems given the HTTP codes and error codes.\r\n    private void FindRDOSRCA(string e2_ntstatus, int e2_http)\r\n    {\r\n        if (e2_ntstatus == "C00000A3" && e2_http == 503)\r\n        {\r\n            isRCAPresent[0] = true;\r\n            AddKeyToDict(rcas[0]);\r\n        }\r\n        else if (e2_ntstatus == "C0000010" && e2_http == 206)\r\n        {\r\n            isRCAPresent[1] = true;\r\n            AddKeyToDict(rcas[1]);\r\n        }\r\n        else if (e2_ntstatus == "81700099" && e2_http == 403)\r\n        {\r\n            isRCAPresent[2] = true;\r\n            AddKeyToDict(rcas[2]);\r\n        }\r\n        else if (e2_ntstatus == "C000020D")\r\n        {\r\n            isRCAPresent[3] = true;\r\n            AddKeyToDict(rcas[3]);\r\n        }\r\n        else if (e2_ntstatus == "C00000B5" && e2_http == 500)\r\n        {\r\n            isRCAPresent[4] = true;\r\n            AddKeyToDict(rcas[4]);\r\n        }\r\n    }\r\n\r\n    private void AddKeyToDict(string key)\r\n    {\r\n        if (!allEvents.ContainsKey(key))\r\n            allEvents.Add(key, 1);\r\n        else\r\n            allEvents[key] = allEvents[key] + 1;\r\n    }\r\n}\r\n\r\npublic class Helper\r\n{\r\n    public static int minutesInADay = 1440;\r\n\r\n    public static string RemoveNull(string nullableval, string replacement)\r\n    {\r\n        if (nullableval == null)\r\n            return replacement;\r\n        else\r\n            return nullableval;\r\n    }\r\n    public static long RemoveNullLong(long? nullableval)\r\n    {\r\n        if (nullableval.HasValue)\r\n            return nullableval.Value;\r\n        else\r\n            return 0L;\r\n    }\r\n    public static DateTime RemoveNullDateTime(DateTime? nullableval, DateTime? replacement)\r\n    {\r\n        if (nullableval == null) return replacement.Value;\r\n        else\r\n        {\r\n            return nullableval.Value;\r\n        }\r\n    }\r\n\r\n    //Converts big endian to little endian. Obtained this logic from Vivek and Suraj of the OS team.\r\n    public static String GetCode(String paramBinary)\r\n    {\r\n        try\r\n        {\r\n            String paramBinarySubstring = paramBinary.Substring(40);\r\n            String ErrorCode = paramBinarySubstring.Substring(6, 2) + paramBinarySubstring.Substring(4, 2) + paramBinarySubstring.Substring(2, 2) + paramBinarySubstring.Substring(0, 2);\r\n            return ErrorCode;\r\n        }\r\n        catch (Exception e)\r\n        {\r\n            return "NA";\r\n        }\r\n    }\r\n\r\n    public static String CombineRCA(String xstoreRca, String rdosRca)\r\n    {\r\n        string returnedrca = "Unknown";\r\n        //if (rdosRca == "Compute.SocketDisconnectBlocked") //SocketDisconnect blocked takes priority over everything else.\r\n        //{\r\n        //     returnedrca = rdosRca;\r\n        //}\r\n        if ((xstoreRca.Contains("Traffic_Unknown") || xstoreRca.Contains("XStore All Success_NotXStore") || String.IsNullOrEmpty(xstoreRca) || xstoreRca == "_" || xstoreRca == "Unknown_dataNotTriaged") && rdosRca != "None" && rdosRca != null)\r\n        {\r\n            returnedrca = rdosRca;\r\n        }\r\n        else if (xstoreRca.Contains("Client Network Latency_NotXStore"))\r\n        {\r\n            returnedrca = xstoreRca + "-" + rdosRca;\r\n        }\r\n        else\r\n        {\r\n            returnedrca = xstoreRca;\r\n        }\r\n        if (returnedrca == null)\r\n            return "Unknown";\r\n        else\r\n            return returnedrca;\r\n    }\r\n\r\n    public static String GetClientRequestId(String paramBinary)\r\n    {\r\n        try\r\n        {\r\n            String ClientRequestId = paramBinary.Substring(94, 2) + paramBinary.Substring(92, 2) +\r\n            paramBinary.Substring(90, 2) + paramBinary.Substring(88, 2) +\r\n            paramBinary.Substring(86, 2) + paramBinary.Substring(84, 2) + paramBinary.Substring(82, 2)\r\n            + paramBinary.Substring(80, 2);\r\n            return ClientRequestId;\r\n        }\r\n        catch (Exception e)\r\n        {\r\n            return "NA";\r\n        }\r\n    }\r\n    public static String GetLocalPort(String paramBinary)\r\n    {\r\n        try\r\n        {\r\n            String LocalPort = paramBinary.Substring(98, 2) + paramBinary.Substring(96, 2);\r\n            return LocalPort;\r\n        }\r\n        catch (Exception e)\r\n        {\r\n            return "NA";\r\n        }\r\n    }\r\n    /*\r\n    public static String GetLocalPort(String paramBinary){\r\n        try{\r\n            String PendingRequest = paramBinary.Substring(100,2);\r\n            return PendingRequest;\r\n        }\r\n        catch(Exception e){\r\n            return "NA";\r\n        }\r\n    }*/\r\n    public static String GetCxnTimeoutFactor(String paramBinary)\r\n    {\r\n        try\r\n        {\r\n            String CxnTimeoutFactor = paramBinary.Substring(102, 2);\r\n            return CxnTimeoutFactor;\r\n        }\r\n        catch (Exception e)\r\n        {\r\n            return "NA";\r\n        }\r\n    }\r\n    public static String GetRequestTime(String paramBinary)\r\n    {\r\n        try\r\n        {\r\n            String RequestTime = paramBinary.Substring(110, 2) + paramBinary.Substring(108, 2)\r\n                + paramBinary.Substring(106, 2) + paramBinary.Substring(104, 2);\r\n            return RequestTime;\r\n        }\r\n        catch (Exception e)\r\n        {\r\n            return "NA";\r\n        }\r\n    }\r\n    public static String GetLastStatus(String paramBinary)\r\n    {\r\n        try\r\n        {\r\n            String LastStatus = paramBinary.Substring(150, 2) + paramBinary.Substring(148, 2) +\r\n                paramBinary.Substring(146, 2) + paramBinary.Substring(144, 2);\r\n            return LastStatus;\r\n        }\r\n        catch (Exception e)\r\n        {\r\n            return "NA";\r\n        }\r\n    }\r\n    public static String GetSequenceNo(String paramBinary)\r\n    {\r\n        try\r\n        {\r\n            String SequenceNo = paramBinary.Substring(158, 2) + paramBinary.Substring(156, 2)\r\n                + paramBinary.Substring(154, 2) + paramBinary.Substring(152, 2);\r\n            return SequenceNo;\r\n        }\r\n        catch (Exception e)\r\n        {\r\n            return "NA";\r\n        }\r\n    }\r\n    public static String GetOffset(String paramBinary)\r\n    {\r\n        try\r\n        {\r\n            String Offset = paramBinary.Substring(174, 2) + paramBinary.Substring(172, 2) +\r\n            paramBinary.Substring(170, 2) + paramBinary.Substring(168, 2) + paramBinary.Substring(166, 2)\r\n             + paramBinary.Substring(164, 2) + paramBinary.Substring(162, 2) + paramBinary.Substring(160, 2);\r\n            return Offset;\r\n        }\r\n        catch (Exception e)\r\n        {\r\n            return "NA";\r\n        }\r\n    }\r\n    public static String GetIoLength(String paramBinary)\r\n    {\r\n        try\r\n        {\r\n            String IoLength = paramBinary.Substring(182, 2) + paramBinary.Substring(180, 2) +\r\n                paramBinary.Substring(178, 2) + paramBinary.Substring(176, 2);\r\n            return IoLength;\r\n        }\r\n        catch (Exception e)\r\n        {\r\n            return "NA";\r\n        }\r\n    }\r\n    public static String GetRecvStatus(String paramBinary)\r\n    {\r\n        try\r\n        {\r\n            String RecvStatus = paramBinary.Substring(190, 2) + paramBinary.Substring(188, 2) +\r\n            paramBinary.Substring(186, 2) + paramBinary.Substring(184, 2);\r\n            return RecvStatus;\r\n        }\r\n        catch (Exception e)\r\n        {\r\n            return "NA";\r\n        }\r\n    }\r\n    public static int GetHttpCode(String paramBinary)\r\n    {\r\n        try\r\n        {\r\n            String HttpCode = paramBinary.Substring(198, 2) + paramBinary.Substring(196, 2)\r\n                + paramBinary.Substring(194, 2) + paramBinary.Substring(192, 2);\r\n            return Convert.ToInt32(HttpCode, 16);\r\n        }\r\n        catch (Exception e)\r\n        {\r\n            return -1;\r\n        }\r\n    }\r\n    public static String GetRetries(String paramBinary)\r\n    {\r\n        try\r\n        {\r\n            String Retries = paramBinary.Substring(200, 2);\r\n            return Retries;\r\n        }\r\n        catch (Exception e)\r\n        {\r\n            return "NA";\r\n        }\r\n    }\r\n    public static String GetFlags(String paramBinary)\r\n    {\r\n        try\r\n        {\r\n            String Flags = paramBinary.Substring(202, 2);\r\n            return Flags;\r\n        }\r\n        catch (Exception e)\r\n        {\r\n            return "NA";\r\n        }\r\n    }\r\n    public static String GetResubmitCount(String paramBinary)\r\n    {\r\n        try\r\n        {\r\n            String ResubmitCount = paramBinary.Substring(2014, 2);\r\n            return ResubmitCount;\r\n        }\r\n        catch (Exception e)\r\n        {\r\n            return "NA";\r\n        }\r\n    }\r\n    public static double GetDuration(DateTime? startTime, DateTime endTime)\r\n    {\r\n        if (startTime == null) return -10000;\r\n        else\r\n        {\r\n            return endTime.Subtract(startTime.Value).TotalMinutes;\r\n        }\r\n    }\r\n    public static double GetNullableDuration(string startTime, DateTime endTime)\r\n    {\r\n        if (startTime == null) return -10000;\r\n        else\r\n        {\r\n            return endTime.Subtract(DateTime.Parse(startTime)).TotalMinutes;\r\n        }\r\n    }\r\n    public static string SplitVhdPath(string vhdpath)\r\n    {\r\n        string[] parts = vhdpath.Split(\'/\');\r\n        if (parts.Length > 3)\r\n            return (parts[2] + "/" + parts[3]);\r\n        else\r\n            return "incorrectly_formatted_path";\r\n    }\r\n\r\n    public static string SplitVhdPathV1(string vhdpath)\r\n    {\r\n        if (string.IsNullOrEmpty(vhdpath))\r\n            return "<nullVhdPath>";\r\n        vhdpath = vhdpath.Split(\'#\')[0];\r\n        string[] parts = vhdpath.Split(\'/\');\r\n        if (parts.Length > 3)\r\n            return string.Join("/", parts, 2, parts.Length - 2);\r\n        else\r\n            return "incorrectly_formatted_path";\r\n    }\r\n\r\n    public static string GetBlob(string VhdPath)\r\n    {\r\n        if (string.IsNullOrEmpty(VhdPath))\r\n            return "<nullBlobPath>";\r\n        string[] splitted = VhdPath.Split(\'/\');\r\n        return splitted[splitted.Length - 1].Split(\'!\')[0];\r\n    }\r\n}\r\n \r\n #ENDCS',
      ADLSubscription: null,
      NebulaParameters: null,
      ProcessingEngine: 1,
      ActivityName: "Data Processing - Cosmos",
      ActivityType: 0,
      Collapsed: false,
    },
  ],
  PublishActivities: [],
  PostPublishActivities: [],
  Parameters: [
    {
      Name: "Environment",
      Value: "Prod",
      Collapsed: false,
    },
    {
      Name: "IsMonthlyRun",
      Value: "false",
      Collapsed: false,
    },
    {
      Name: "BuildVersion",
      Value: "1.0.0.628",
      Collapsed: false,
    },
  ],
  UserMacros: [],
  FailureAlertEmails: "azcinsightsVM@microsoft.com",
  VerboseAlertEmails: null,
  MaxDelay: "00:00:00",
  MetricAccount: null,
  MaxExecutionTime: "1.00:00:00",
  Activities: [
    {
      $type:
        "Microsoft.Azure.Analytics.JobSchedulerContracts.DataProcessing, Microsoft.Azure.Analytics.JobSchedulerContracts",
      Script:
        '//Script GUID:3e42bc25-1769-4709-a8cb-c308f670682e\r\n//Used for tracking history\r\nMODULE @"/shares/AzureComputeInsights/ComputeInsights/SDK/ComputeInsightsSDK.module" AS ComputeInsights;\r\nMODULE @"/shares/AzureAnalytics.Prod/Sdk/AzureAnalytics1.3.module" AS AzureAnalytics;\r\n#DECLARE startDateTime string = @@startDateTime@@;\r\n#DECLARE starthour string = DateTime.Parse(@startDateTime).Hour.ToString();\r\n#DECLARE starttime string = DateTime.Parse(@startDateTime).ToString();\r\n#DECLARE endtime string = DateTime.Parse(@starttime).AddDays(1).AddSeconds(-1).ToString();\r\n#DECLARE minutesInADay string = "1440";\r\n\r\n#DECLARE Env string = "@@Environment@@";\r\n#DECLARE IsStageRun bool = @Env.IndexOf("Stage", StringComparison.InvariantCultureIgnoreCase)>=0;\r\n#DECLARE IsMonthlyRun bool = bool.Parse("@@IsMonthlyRun@@");\r\n#DECLARE BuildVersion string = "@@BuildVersion@@";\r\n#DECLARE UseLocalResource bool = "@@UseLocalResource@@".StartsWith("@@") ? false : bool.Parse("@@UseLocalResource@@");\r\n\r\n// Paths for libraries, modules and views.\r\n#DECLARE VmaBasePath string = @"/users/_sangamsvcacct/VMAvailabilityHBInstrumentation";\r\n\r\n#IF(@UseLocalResource)\r\n    #DECLARE rootPath string = @"..\\..\\..\\..\\out\\debug-AMD64";\r\n    #DECLARE vmaLibPath string = string.Format(@"{0}\\VMALib\\VMALib.dll", @rootPath);\r\n#ELSE\r\n    #DECLARE rootPath string = string.Format("{0}/{1}/{2}", @VmaBasePath, @Env, @BuildVersion);\r\n    #DECLARE vmaLibPath string = string.Format("{0}/Ref/VMALib.dll", @rootPath);\r\n#ENDIF\r\n\r\n#DECLARE ExecutionLogStreamName string = @"/shares/AzureAnalytics.Dev/AzureAnalytics.Dev.PublishedData/computeanalytics/ExecutionLog/" + @@Environment@@\r\n            + DateTime.UtcNow.ToString("/yyyy/MM/") + "SeedDate_"\r\n            + DateTime.Parse(@@startDateTime@@).ToString("yyyy_MM_dd_HH-")\r\n            + DateTime.Parse(@@endDateTime@@).ToString("yyyy_MM_dd_HH-")\r\n            + "VMA_CookInfo_Event17_Derived-Daily-ExecutionDate_"\r\n            + DateTime.UtcNow.ToString("yyyy_MM_dd_HH_mm_ss_fff\'.ss\'");\r\n\r\n#IF(NOT @IsMonthlyRun)\r\n    #DECLARE xdiskstart string = DateTime.Parse(@startDateTime).ToString();//Same as start and end.\r\n    #DECLARE xdiskend string = DateTime.Parse(@starttime).AddDays(1).AddHours(2).ToString(); //Read in two extra hours \r\n#ELSE\r\n    #DECLARE xdiskstart string = DateTime.Now.AddDays(-1).Date.ToString("M/d/yyyy");//Use the most recent.\r\n    #DECLARE xdiskend string = DateTime.Parse(@xdiskstart).AddDays(1).ToString();\r\n#ENDIF\r\n\r\n#IF(@IsStageRun)\r\n    #DECLARE notificationEntity string = "computeanalytics.statistics_e17byRCA2Stage";\r\n    #DECLARE publishLocation string = @"/shares/AzureAnalytics.Dev/AzureAnalytics.Dev.PublishedData/Microsoft.Azure.Compute/Event17DerivedTable11Stage1";\r\n    #DECLARE publishLocationForKusto string = @"/shares/AzureAnalytics.Dev/AzureAnalytics.Dev.PublishedData/Microsoft.Azure.Compute/Event17DerivedTable11Stage1ForKusto";\r\n#ELSE\r\n    #DECLARE notificationEntity string = "computeanalytics.statistics_e17byRCA2";\r\n    #DECLARE publishLocation string = @"/shares/AzureAnalytics.Dev/AzureAnalytics.Dev.PublishedData/Microsoft.Azure.Compute/Event17DerivedTable11";\r\n    #DECLARE publishLocationForKusto string = @"/shares/AzureAnalytics.Dev/AzureAnalytics.Dev.PublishedData/Microsoft.Azure.Compute/Event17DerivedTable11ForKusto";\r\n#ENDIF\r\n\r\nREFERENCE @vmaLibPath;\r\n\r\n#DECLARE OsVhddiskEntity string = @"Microsoft.Cloud.Public.Production.Fa.OsVhddiskEventTableV1";\r\n\r\nAzureAnalytics.Initialize(entity = @OsVhddiskEntity);\r\n\r\nfaOsTableV1 = AzureAnalytics.LoadStream\r\n     (\r\n         entity = @OsVhddiskEntity,\r\n         startDateTime = @starttime,\r\n         endDateTime = @endtime\r\n     );\r\n\r\n#SET OsVhddiskEntity = @"Microsoft.Cloud.Public.Production.Fa.OsVhddiskEventTableV2";\r\n\r\nAzureAnalytics.Initialize(entity = @OsVhddiskEntity);\r\n\r\nfaOsTableV2 = AzureAnalytics.LoadStream\r\n     (\r\n         entity = @OsVhddiskEntity,\r\n         startDateTime = @starttime,\r\n         endDateTime = @endtime\r\n     );\r\n\r\n#SET OsVhddiskEntity = @"Microsoft.Cloud.Mooncake.Production.Fa.OsVhddiskEventTableV1";\r\n\r\nAzureAnalytics.Initialize(entity = @OsVhddiskEntity);\r\n\r\nmoonFaOsTable = AzureAnalytics.LoadStream\r\n     (\r\n         entity = @OsVhddiskEntity,\r\n         startDateTime = @starttime,\r\n         endDateTime = @endtime\r\n     );\r\n\r\n#SET OsVhddiskEntity = @"Microsoft.Cloud.Fairfax.Production.Fa.OsVhddiskEventTableV1";\r\n\r\nAzureAnalytics.Initialize(entity = @OsVhddiskEntity);\r\n\r\nffFaOsTable = AzureAnalytics.LoadStream\r\n     (\r\n         entity = @OsVhddiskEntity,\r\n         startDateTime = @starttime,\r\n         endDateTime = @endtime\r\n     );\r\n\r\n#SET OsVhddiskEntity = @"Microsoft.Cloud.Blackforest.Production.Fa.OsVhddiskEventTableV1";\r\n\r\nbfFaOsTable = AzureAnalytics.LoadStream\r\n     (\r\n         entity = @OsVhddiskEntity,\r\n         startDateTime = @starttime,\r\n         endDateTime = @endtime\r\n     );\r\n\r\nfaOsTable =\r\n    SELECT * FROM faOsTableV1\r\n    UNION ALL\r\n    SELECT *, "" AS RowKey FROM faOsTableV2\r\n    UNION ALL\r\n    SELECT * FROM moonFaOsTable\r\n    UNION ALL\r\n    SELECT * FROM ffFaOsTable\r\n    UNION ALL\r\n    SELECT * FROM bfFaOsTable;\r\n\r\n#DECLARE DiskFailureEntity string = @"Microsoft.Cloud.Public.Production.XHealth.DiskFailureXStoreTriageV1";\r\n\r\nAzureAnalytics.Initialize(\r\n    entity = @DiskFailureEntity);\r\n\r\nxdisktable = AzureAnalytics.LoadStream(\r\n    //entity = "Microsoft.Cloud.xdiskreportsdiskfailuresnapshotv2",\r\n    entity = @DiskFailureEntity,\r\n    startDateTime = @xdiskstart,\r\n    endDateTime = @xdiskend);\r\n\r\nfaOsTable_projected = \r\nSELECT\r\n    PreciseTimeStamp.GetValueOrDefault(DateTime.MaxValue) AS PreciseTimeStamp,\r\n    NodeIdentity,\r\n    DataCenter,\r\n    Cluster,\r\n    Helper.GetCode(ParamBinary1) AS err_code,\r\n    Helper.GetHttpCode(ParamBinary1) AS http_code,\r\n    "Event" + EventId.ToString() + "_" + Helper.GetCode(ParamBinary1) AS err_type,\r\n    EventId,\r\n    ParamStr1\r\n    FROM faOsTable;\r\n\r\nevent17_table = \r\n    SELECT * \r\n    FROM faOsTable_projected\r\n    WHERE EventId == 17 OR EventId == 21;\r\n\r\nevent2And3_table =\r\n    SELECT *, Helper.GetBlob(ParamStr1) AS E2Blob\r\n    FROM faOsTable_projected\r\n    WHERE EventId == 2 OR EventId == 3 OR EventId == 29;\r\n\r\n\r\nevent17_derived = SELECT\r\n    event17_table.NodeIdentity AS E17_nodes,//0\r\n    event17_table.PreciseTimeStamp AS E17_timestamp,//1\r\n    event2And3_table.NodeIdentity AS E2_nodes,//2\r\n    event2And3_table.PreciseTimeStamp AS E2_timestamp,//3\r\n    event2And3_table.err_type AS E2_error_type,//4\r\n    event17_table.DataCenter AS E17_datacenter,//5\r\n    event17_table.Cluster AS E17_cluster,//6\r\n    Helper.SplitVhdPathV1(event17_table.ParamStr1) AS VhdPath,//7\r\n    event2And3_table.DataCenter AS E2_datacenter,//8\r\n    event2And3_table.Cluster AS E2_cluster,//9\r\n    event17_table.err_code AS E17_errorcode,//10\r\n    event2And3_table.http_code AS E2_http,//11\r\n    event2And3_table.err_code AS E2_ntstatus,//12\r\n    event2And3_table.err_code AS E2_errcode,//13\r\n    E2Blob,//14\r\n    event17_table.ParamStr1 AS E17VhdFull,//15\r\n    event2And3_table.EventId AS E2_eventid,//16\r\n    event17_table.EventId AS E17_eventid//17\r\nFROM event17_table LEFT OUTER JOIN event2And3_table\r\nON event17_table.NodeIdentity == event2And3_table.NodeIdentity\r\nAND event17_table.Cluster == event2And3_table.Cluster;\r\n\r\nevent17_derived = SELECT *,\r\n    //((Helper.GetDuration(E2_timestamp, E17_timestamp) <= 10 AND Helper.GetDuration(E2_timestamp, E17_timestamp) >= -2 AND (VhdPath.Contains(E2Blob)) OR E2Blob.Contains(VhdPath)) ? 1 : 0) AS InWindow;\r\n    (\r\n        (\r\n            Helper.GetDuration(E2_timestamp, E17_timestamp) <= 10 AND Helper.GetDuration(E2_timestamp, E17_timestamp) >= -2 && !string.IsNullOrEmpty(E2Blob) &&\r\n             (\r\n                 VhdPath.Contains(E2Blob)  OR E2Blob.Contains(VhdPath)\r\n             )\r\n        ) ? 1 : 0\r\n    ) AS InWindow;\r\n\r\nevent17_projected = SELECT\r\n    E17_nodes,//0\r\n    E17_errorcode,//1\r\n    E17_timestamp,//2\r\n    E17_datacenter,//3\r\n    E17_cluster,//4\r\n    VhdPath,//5\r\n    E2_http,//6\r\n    E2_ntstatus,//7\r\n    ((InWindow == 1 AND E2_error_type == "Event2_C0000196") ? 1:0) AS Event2_C0000196_Count,//8\r\n    ((InWindow == 1 AND E2_error_type == "Event2_C0000120")? 1:0) AS Event2_C0000120_Count,//9\r\n    ((InWindow == 1 AND E2_error_type == "Event2_C00000A3")? 1:0) AS Event2_C00000A3_Count,//10\r\n    ((InWindow == 1 AND E2_error_type == "Event3_C000000E")? 1:0) AS Event3_C000000E_Count,//11\r\n    ((InWindow == 1 AND E2_error_type == "Event3_C0000044")? 1:0) AS Event3_C0000044_Count,//12\r\n    E2Blob,//13\r\n    E17VhdFull,//14\r\n    E2_eventid,//15\r\n    E17_eventid,//16\r\n    E2_timestamp,//17\r\n    InWindow//18\r\nFROM event17_derived;\r\n\r\nevent17_reduced = REDUCE event17_projected PRODUCE\r\n    E17_NodeIp,\r\n    E17_ErrorCode,\r\n    E17_timestamp,\r\n    E17_DataCenter,\r\n    E17_Cluster,\r\n    VhdPath,\r\n    Event2_C0000196_Count,\r\n    Event2_C0000120_Count,\r\n    Event2_C00000A3_Count,\r\n    Event3_C000000E_Count,\r\n    Event3_C0000044_Count,\r\n    RCAL2,\r\n    EventList,\r\n    E17VhdFull,\r\n    E17EventId\r\nUSING EventsAroundReducer ON\r\n    E17_nodes,\r\n    E17_datacenter,\r\n    E17_cluster,\r\n    VhdPath,\r\n    E17_errorcode,\r\n    E17_timestamp,\r\n    E17VhdFull;\r\n\r\n//Replace this grouping by the reducer.\r\nevent17_grouped = SELECT\r\n    E17_nodes AS E17_NodeIp,\r\n    E17_errorcode AS E17_ErrorCode,\r\n    E17_timestamp,\r\n    E17_datacenter AS E17_DataCenter,\r\n    E17_cluster AS E17_Cluster,\r\n    VhdPath,\r\n    SUM(Event2_C0000196_Count) AS Event2_C0000196_Count,\r\n    SUM(Event2_C0000120_Count) AS Event2_C0000120_Count,\r\n    SUM(Event2_C00000A3_Count) AS Event2_C00000A3_Count,\r\n    SUM(Event3_C000000E_Count) AS Event3_C000000E_Count,\r\n    SUM(Event3_C0000044_Count) AS Event3_C0000044_Count\r\nFROM event17_projected\r\nGROUP BY\r\n    E17_NodeIp,\r\n    E17_DataCenter,\r\n    E17_Cluster,\r\n    VhdPath,\r\n    E17_ErrorCode,\r\n    E17_timestamp;\r\n\r\n//Since we are reading from snapshot, we need to be careful about possible duplicates.\r\n\r\nxdisktable_distinct = SELECT DISTINCT * FROM xdisktable;\r\n\r\nxdisktableProjected  = SELECT * ,\r\n    TimeStamp.Value.ToUniversalTime() AS xdisk_Time,\r\n    (String)Helper.GetCode(ParamBinary1) AS XdiskErrorCode\r\n FROM xdisktable_distinct;\r\n\r\nxdisktableProjected = SELECT * FROM xdisktableProjected WHERE xdisk_Time > DateTime.Parse(@starttime) AND xdisk_Time < DateTime.Parse(@endtime);\r\n\r\nxdisktableProjected = SELECT\r\n    *,\r\n    ROW_NUMBER() OVER (PARTITION BY PartitionKey, RowKey ORDER BY TriageTimestamp DESC) AS RowNumber\r\nFROM xdisktableProjected\r\nHAVING RowNumber == 1;\r\n\r\nevent17_xdisk_joined = SELECT\r\n        E17_NodeIp,\r\n        E17_ErrorCode,\r\n        E17_timestamp,\r\n        E17_DataCenter,\r\n        E17_Cluster,\r\n        VhdPath,\r\n        Event2_C0000196_Count,\r\n        Event2_C0000120_Count,\r\n        Event2_C00000A3_Count,\r\n        Event3_C000000E_Count,\r\n        Event3_C0000044_Count,\r\n        DateTime.Parse(xdisktableProjected.TriageCategory) AS xdisk_timestamp,\r\n        //xdisktableProjected.TriageCategory AS xdisk_timestamp_string,\r\n        xdisktableProjected.ClientIP,\r\n        xdisktableProjected.BlobPath,\r\n        xdisktableProjected.TriageReason + "_" +  xdisktableProjected.TriageCategory AS RCA,\r\n        xdisktableProjected.VhdAppCluster AS Cluster,\r\n        //Helper.ConvertClusterToDC(TriageGroup.Substring),//(0,3) AS DataCenter,\r\n        (VhdAppCluster == null ? null : (String)VhdAppCluster.Substring(0,3)) AS DataCenter,\r\n        XdiskErrorCode,\r\n        StorageTenant AS StorageCluster,\r\n        AccountName,\r\n        RCAL2,\r\n        EventList,\r\n        xdisk_Time,\r\n        E17EventId\r\n    FROM event17_reduced FULL OUTER JOIN xdisktableProjected ON\r\n    event17_reduced.E17_NodeIp == xdisktableProjected.ClientIP AND\r\n    event17_reduced.E17_Cluster == xdisktableProjected.VhdAppCluster AND\r\n    //event17_reduced.VhdPath == xdisktableProjected.BlobPath AND\r\n    event17_reduced.E17VhdFull == xdisktableProjected.ParamStr1 AND\r\n    event17_reduced.E17_timestamp == xdisktableProjected.xdisk_Time;\r\n\r\nevent17_xdisk_projected = SELECT\r\n    Helper.RemoveNull(E17_NodeIp, ClientIP) AS E17_NodeIp,\r\n    Helper.RemoveNull(E17_ErrorCode, "NA") AS E17_ErrorCode,\r\n    Helper.RemoveNullDateTime(E17_timestamp, xdisk_Time) AS E17_timestamp,\r\n    Helper.RemoveNull(E17_DataCenter, DataCenter) AS E17_DataCenter,\r\n    Helper.RemoveNull(E17_Cluster, Cluster) AS E17_Cluster,\r\n    Helper.RemoveNull(VhdPath, BlobPath) AS VhdPath,\r\n    Helper.RemoveNullLong(Event2_C0000196_Count) AS Event2_C0000196_Count,\r\n    Helper.RemoveNullLong(Event2_C0000120_Count) AS Event2_C0000120_Count,\r\n    Helper.RemoveNullLong(Event2_C00000A3_Count) AS Event2_C00000A3_Count,\r\n    Helper.RemoveNullLong(Event3_C000000E_Count) AS Event3_C000000E_Count,\r\n    Helper.RemoveNullLong(Event3_C0000044_Count) AS Event3_C0000044_Count,\r\n    xdisk_timestamp,\r\n    ClientIP,\r\n    BlobPath,\r\n    (RCA == "_") ? "Unknown_dataNotTriaged" : RCA AS RCA,\r\n    Cluster,\r\n    DataCenter,\r\n    XdiskErrorCode,\r\n    StorageCluster,\r\n    AccountName,\r\n    RCAL2,\r\n    EventList,\r\n    E17EventId\r\nFROM event17_xdisk_joined;\r\n\r\nnodeId2Ip =\r\n    EXTRACT clusterRaw :string,\r\n            nodeIpRaw : string,\r\n            nodeIdRaw : string\r\n    FROM @"/users/_sangamsvcacct/Azuredbg/BladeIDtoIPMappings.csv"\r\n    USING DefaultTextExtractor(delimiter: \',\', silent:true);\r\n\r\naugNodeId2Ip =\r\n    SELECT\r\n        clusterRaw AS cluster,\r\n        nodeIdRaw.Trim().ToLower() AS nodeId,\r\n        nodeIpRaw.Trim() AS nodeIp\r\n    FROM nodeId2Ip;\r\n\r\nevent17_with_node_ids = SELECT\r\n        augNodeId2Ip.nodeId AS NodeId,\r\n        E17_NodeIp,\r\n        E17_Cluster,\r\n        E17_DataCenter,\r\n        E17_ErrorCode,\r\n        E17_timestamp,\r\n        VhdPath,\r\n        Event2_C0000196_Count AS ReadWrite_TooManySessionsOnNetwork,\r\n        Event2_C0000120_Count AS ReadWrite_CantDelete,\r\n        Event2_C00000A3_Count AS ReadWrite_InvalidAttributes,\r\n        Event3_C000000E_Count AS CommunicationProtocol_NoFile,\r\n        Event3_C0000044_Count AS CommunicationProtocol_InsuffucuentQuota,\r\n        (E17EventId == 21 ? "TempDiskSpillover_" + RCA : RCA) AS RCA,\r\n        RCAL2,\r\n        XdiskErrorCode,\r\n        StorageCluster,\r\n        Helper.CombineRCA(RCA, RCAL2) AS TriageSummary,\r\n        "" AS Classification,\r\n        AccountName,\r\n        EventList,\r\n        "false" AS UsedNetworkingAgent6,\r\n        E17EventId\r\n        //"" AS NetworkingRCA\r\n    FROM event17_xdisk_projected LEFT OUTER JOIN augNodeId2Ip\r\n    ON event17_xdisk_projected.E17_NodeIp == augNodeId2Ip.nodeIp\r\n    AND event17_xdisk_projected.E17_Cluster == augNodeId2Ip.cluster;\r\n\r\n//Since this is a small table, we can process one day at a time.\r\n\r\nComputeInsights.PublishStream(\r\n\tinput = event17_with_node_ids,\r\n\tstreamPath = @publishLocation,\r\n\tstartDateTime = @startDateTime,\r\n\texpiryInDays = "180",\r\n\tperiodInMinutes = "1440",\r\n\tclusteredBy = "E17_Cluster",\r\n    sortedBy = "E17_timestamp"\r\n    );\r\n\r\n//Publishing a duplicated stream to a different location to differentiate Kusto uploads from Lens\r\n\r\nComputeInsights.PublishStream(\r\n\tinput = event17_with_node_ids,\r\n\tstreamPath = @publishLocationForKusto,\r\n\tstartDateTime = @startDateTime,\r\n\texpiryInDays = "180",\r\n\tperiodInMinutes = "1440",\r\n\tclusteredBy = "E17_Cluster",\r\n    sortedBy = "E17_timestamp"\r\n    );\r\n\r\ntest = SELECT COUNT() AS Total FROM event17_with_node_ids;\r\nOUTPUT test TO SSTREAM @ExecutionLogStreamName;\r\n\r\nnotification_for_networking = SELECT\r\n    RCA AS RCALevel1,\r\n    (long?)COUNT() AS e17_original,\r\n    (long?)-1 AS  post_networking,\r\n    (long?)-1 AS networkRCAAdded\r\nFROM event17_with_node_ids;\r\n\r\n//Reusing old networking stats for notification.\r\nAzureAnalytics.PublishStream(\r\n    entity = @notificationEntity,\r\n    startDateTime = @startDateTime,\r\n    periodInMinutes = @minutesInADay,\r\n    input = notification_for_networking);\r\n\r\n\r\n \r\n #CS \r\n using System;\r\nusing System.Collections.Generic;\r\nusing System.IO;\r\nusing System.Text;\r\nusing ScopeRuntime;\r\n\r\npublic class EventsAroundReducer : Reducer\r\n{\r\n    //Private variables that log the IO failure information.\r\n    private Dictionary<String, int> allEvents;\r\n    //The RCAs are in order of priority.\r\n    private String[] rcas = {"XStore.throttling_customer_pushing_more_data_than_allowed_limit#NTStatus:C00000A3#HTTP:503",\r\n                "XStore.DidntReceiveFullPacket_FrontEndsBusy#NTStatus:C0000010#HTTP:206",\r\n                "Compute.VMTurnOffAttempt_ZeroCustomerImpact#NTStatus:81700099#HTTP:403",\r\n                "Networking.suspect#NTStatus:C000020D",\r\n                "XStore.RequestNotCompleted#NTStatus:C00000B5#HTTP:500"};\r\n    private bool[] isRCAPresent;\r\n\r\n    public EventsAroundReducer()\r\n    {\r\n                \r\n        allEvents = new Dictionary<String, int>();\r\n        isRCAPresent = new bool[rcas.Length];\r\n    }\r\n\r\n    public override bool IsRecursive\r\n    {\r\n        get { return true; }\r\n    }\r\n\r\n    public override Schema Produces(string[] requestedColumns, string[] args, Schema input)\r\n    {\r\n        return new Schema(\r\n                "E17_NodeIp," +\r\n                "E17_ErrorCode," +\r\n                "E17_timestamp:DateTime," +\r\n                "E17_DataCenter," +\r\n                "E17_Cluster," +\r\n                "VhdPath," +\r\n                "Event2_C0000196_Count:long," +\r\n                "Event2_C0000120_Count:long," +\r\n                "Event2_C00000A3_Count:long," +\r\n                "Event3_C000000E_Count:long," +\r\n                "Event3_C0000044_Count:long," +\r\n                "RCAL2," + \r\n                "EventList," +\r\n                "E17VhdFull," +\r\n                "E17EventId:int"\r\n            );\r\n    }\r\n    \r\n    public override IEnumerable<Row> Reduce(RowSet input, Row outputRow, string[] args)\r\n    {\r\n        string e17NodeIp = "", e17ErrorCode = "", e17DataCenter = "", e17Cluster = "", vhdPath = "", e2_ntstatus = "", rca = "", eventList = "", e17VhdFull = "",  e2Blob = "";\r\n        int e2_http = -1, inWindow = 0;\r\n        long event2_C0000196_Count = 0, event2_C0000120_Count = 0, event2_C00000A3_Count = 0, event3_C000000E_Count = 0, event3_C0000044_Count = 0;\r\n        int e2Eventid = 0, e17Eventid = 0, e3Count = 0;\r\n        DateTime e2Timestamp = DateTime.MinValue, e17Timestamp = DateTime.MinValue;//The Roman empire still thrives.\r\n\r\n        bool firstRow = true, foundE29 = false, foundE2 = false;\r\n        string currentRca = "None";\r\n        DateTime minE29Time = DateTime.MaxValue; //Did we at least colonize 10% of the galaxy yet?\r\n        DateTime minE2Time = DateTime.MaxValue;\r\n        DateTime singularE3Time = DateTime.MaxValue;\r\n        \r\n        foreach (Row inputRow in input.Rows) //Main loop\r\n        {\r\n            //For this row, get all information.\r\n            if(firstRow)\r\n            {\r\n                e17NodeIp = inputRow[0].String;\r\n                e17ErrorCode = inputRow[1].String;\r\n                e17Timestamp = inputRow[2].DateTime;\r\n                e17DataCenter = inputRow[3].String;\r\n                e17Cluster = inputRow[4].String;\r\n                vhdPath = inputRow[5].String;\r\n                e17VhdFull = inputRow[14].String;\r\n                e17Eventid = inputRow[16].Integer;\r\n                firstRow = false;\r\n            }\r\n            e2_http = inputRow[6].Integer;\r\n            e2_ntstatus = inputRow[7].String;\r\n            e2Blob = inputRow[13].String;\r\n            e2Eventid = inputRow[15].Integer;\r\n            e2Timestamp = inputRow[17].DateTime;\r\n            inWindow = inputRow[18].Integer;\r\n            if (inWindow == 1) //Only process RCA if inWindow condition is satisfied.\r\n            {\r\n                //We are looking for the signature of one Event3 after the Event17 followed by one Event29.\r\n                //For this, we will look for the minimum E29 timestamp after the Event17.\r\n                //And if there is only one Event3, we will check that it lies between the Event17 and Event29.\r\n                if (e2Eventid == 29 && e2Timestamp > e17Timestamp)\r\n                {\r\n                    foundE29 = true;\r\n                    if (e2Timestamp < minE29Time)//Find the minimum E29 time in case there were multiple.\r\n                        minE29Time = e2Timestamp;\r\n                }\r\n                else if (e2Eventid == 3 && e2Timestamp > e17Timestamp) //Only looking for E3s after Event17s.\r\n                {\r\n                    e3Count++;\r\n                    singularE3Time = e2Timestamp;//We are only interested in cases where there was exactly one Event3.\r\n                }\r\n                else if (e2Eventid == 2 && e2Timestamp > e17Timestamp)\r\n                {\r\n                    if (e2Timestamp < minE2Time)\r\n                        minE2Time = e2Timestamp;//When did the first Event2 happen?\r\n                }\r\n\r\n                if (e2Blob != null && e17VhdFull != null && (e17VhdFull.Contains(e2Blob) || e2Blob.Contains(e17VhdFull)) && (e2Eventid == 2 || e2Eventid == 3))\r\n                {\r\n                    FindRDOSRCA(e2_ntstatus, e2_http);\r\n                }\r\n            }\r\n\r\n            event2_C0000196_Count += Convert.ToInt64(inputRow[8].String);\r\n            event2_C0000120_Count += Convert.ToInt64(inputRow[9].String);\r\n            event2_C00000A3_Count += Convert.ToInt64(inputRow[10].String);\r\n            event3_C000000E_Count += Convert.ToInt64(inputRow[11].String);\r\n            event3_C0000044_Count += Convert.ToInt64(inputRow[12].String);\r\n        }\r\n\r\n        double e3timeInterval = Math.Abs((e17Timestamp - singularE3Time).TotalMinutes);\r\n\r\n        //if (e3Count == 1 && foundE29 && singularE3Time < minE29Time && minE2Time > minE29Time && e3timeInterval >= 2)\r\n        if (e3Count == 1 && foundE29 && singularE3Time < minE29Time && e3timeInterval >= 1.7)\r\n        //if (e3Count == 1 && foundE29 && singularE3Time < minE29Time) //Special case RCA. Takes higher priority than other RDOS RCAs.\r\n            currentRca = "Compute.SocketDisconnectBlocked";\r\n        else\r\n            currentRca = FinalizeRCA();\r\n\r\n        if (e17Eventid == 21)\r\n            currentRca = "TempDiskSpillover_" + currentRca;\r\n\r\n        eventList = string.Join(";", allEvents.Select(x => x.Key + "=" + x.Value.ToString()).ToArray());\r\n        outputRow[0].Set(e17NodeIp);\r\n        outputRow[1].Set(e17ErrorCode);\r\n        outputRow[2].Set(e17Timestamp);\r\n        outputRow[3].Set(e17DataCenter);\r\n        outputRow[4].Set(e17Cluster);\r\n        outputRow[5].Set(vhdPath);\r\n        outputRow[6].Set(event2_C0000196_Count);\r\n        outputRow[7].Set(event2_C0000120_Count);\r\n        outputRow[8].Set(event2_C00000A3_Count);\r\n        outputRow[9].Set(event3_C000000E_Count);\r\n        outputRow[10].Set(event3_C0000044_Count);\r\n        outputRow[11].Set(currentRca);\r\n        outputRow[12].Set(eventList);\r\n        outputRow[13].Set(e17VhdFull);\r\n        outputRow[14].Set(e17Eventid);\r\n        yield return outputRow;\r\n    }\r\n\r\n    //Searches through the RCA list and outputs the first one that was present for that E17. This is because the RCAs are in order of priority\r\n    private string FinalizeRCA()\r\n    {\r\n        for (int i = 0; i < isRCAPresent.Length; i++)\r\n        {\r\n            if (isRCAPresent[i])\r\n            {\r\n                return rcas[i];//Return the first one you find.\r\n            }\r\n        }\r\n        return "None";\r\n    }\r\n\r\n    //Customized logic specifying our suspected problems given the HTTP codes and error codes.\r\n    private void FindRDOSRCA(string e2_ntstatus, int e2_http)\r\n    {\r\n        if (e2_ntstatus == "C00000A3" && e2_http == 503)\r\n        {\r\n            isRCAPresent[0] = true;\r\n            AddKeyToDict(rcas[0]);\r\n        }\r\n        else if (e2_ntstatus == "C0000010" && e2_http == 206)\r\n        {\r\n            isRCAPresent[1] = true;\r\n            AddKeyToDict(rcas[1]);\r\n        }\r\n        else if (e2_ntstatus == "81700099" && e2_http == 403)\r\n        {\r\n            isRCAPresent[2] = true;\r\n            AddKeyToDict(rcas[2]);\r\n        }\r\n        else if (e2_ntstatus == "C000020D")\r\n        {\r\n            isRCAPresent[3] = true;\r\n            AddKeyToDict(rcas[3]);\r\n        }\r\n        else if (e2_ntstatus == "C00000B5" && e2_http == 500)\r\n        {\r\n            isRCAPresent[4] = true;\r\n            AddKeyToDict(rcas[4]);\r\n        }\r\n    }\r\n\r\n    private void AddKeyToDict(string key)\r\n    {\r\n        if (!allEvents.ContainsKey(key))\r\n            allEvents.Add(key, 1);\r\n        else\r\n            allEvents[key] = allEvents[key] + 1;\r\n    }\r\n}\r\n\r\npublic class Helper\r\n{\r\n    public static int minutesInADay = 1440;\r\n\r\n    public static string RemoveNull(string nullableval, string replacement)\r\n    {\r\n        if (nullableval == null)\r\n            return replacement;\r\n        else\r\n            return nullableval;\r\n    }\r\n    public static long RemoveNullLong(long? nullableval)\r\n    {\r\n        if (nullableval.HasValue)\r\n            return nullableval.Value;\r\n        else\r\n            return 0L;\r\n    }\r\n    public static DateTime RemoveNullDateTime(DateTime? nullableval, DateTime? replacement)\r\n    {\r\n        if (nullableval == null) return replacement.Value;\r\n        else\r\n        {\r\n            return nullableval.Value;\r\n        }\r\n    }\r\n\r\n    //Converts big endian to little endian. Obtained this logic from Vivek and Suraj of the OS team.\r\n    public static String GetCode(String paramBinary)\r\n    {\r\n        try\r\n        {\r\n            String paramBinarySubstring = paramBinary.Substring(40);\r\n            String ErrorCode = paramBinarySubstring.Substring(6, 2) + paramBinarySubstring.Substring(4, 2) + paramBinarySubstring.Substring(2, 2) + paramBinarySubstring.Substring(0, 2);\r\n            return ErrorCode;\r\n        }\r\n        catch (Exception e)\r\n        {\r\n            return "NA";\r\n        }\r\n    }\r\n\r\n    public static String CombineRCA(String xstoreRca, String rdosRca)\r\n    {\r\n        string returnedrca = "Unknown";\r\n        //if (rdosRca == "Compute.SocketDisconnectBlocked") //SocketDisconnect blocked takes priority over everything else.\r\n        //{\r\n        //     returnedrca = rdosRca;\r\n        //}\r\n        if ((xstoreRca.Contains("Traffic_Unknown") || xstoreRca.Contains("XStore All Success_NotXStore") || String.IsNullOrEmpty(xstoreRca) || xstoreRca == "_" || xstoreRca == "Unknown_dataNotTriaged") && rdosRca != "None" && rdosRca != null)\r\n        {\r\n            returnedrca = rdosRca;\r\n        }\r\n        else if (xstoreRca.Contains("Client Network Latency_NotXStore"))\r\n        {\r\n            returnedrca = xstoreRca + "-" + rdosRca;\r\n        }\r\n        else\r\n        {\r\n            returnedrca = xstoreRca;\r\n        }\r\n        if (returnedrca == null)\r\n            return "Unknown";\r\n        else\r\n            return returnedrca;\r\n    }\r\n\r\n    public static String GetClientRequestId(String paramBinary)\r\n    {\r\n        try\r\n        {\r\n            String ClientRequestId = paramBinary.Substring(94, 2) + paramBinary.Substring(92, 2) +\r\n            paramBinary.Substring(90, 2) + paramBinary.Substring(88, 2) +\r\n            paramBinary.Substring(86, 2) + paramBinary.Substring(84, 2) + paramBinary.Substring(82, 2)\r\n            + paramBinary.Substring(80, 2);\r\n            return ClientRequestId;\r\n        }\r\n        catch (Exception e)\r\n        {\r\n            return "NA";\r\n        }\r\n    }\r\n    public static String GetLocalPort(String paramBinary)\r\n    {\r\n        try\r\n        {\r\n            String LocalPort = paramBinary.Substring(98, 2) + paramBinary.Substring(96, 2);\r\n            return LocalPort;\r\n        }\r\n        catch (Exception e)\r\n        {\r\n            return "NA";\r\n        }\r\n    }\r\n    /*\r\n    public static String GetLocalPort(String paramBinary){\r\n        try{\r\n            String PendingRequest = paramBinary.Substring(100,2);\r\n            return PendingRequest;\r\n        }\r\n        catch(Exception e){\r\n            return "NA";\r\n        }\r\n    }*/\r\n    public static String GetCxnTimeoutFactor(String paramBinary)\r\n    {\r\n        try\r\n        {\r\n            String CxnTimeoutFactor = paramBinary.Substring(102, 2);\r\n            return CxnTimeoutFactor;\r\n        }\r\n        catch (Exception e)\r\n        {\r\n            return "NA";\r\n        }\r\n    }\r\n    public static String GetRequestTime(String paramBinary)\r\n    {\r\n        try\r\n        {\r\n            String RequestTime = paramBinary.Substring(110, 2) + paramBinary.Substring(108, 2)\r\n                + paramBinary.Substring(106, 2) + paramBinary.Substring(104, 2);\r\n            return RequestTime;\r\n        }\r\n        catch (Exception e)\r\n        {\r\n            return "NA";\r\n        }\r\n    }\r\n    public static String GetLastStatus(String paramBinary)\r\n    {\r\n        try\r\n        {\r\n            String LastStatus = paramBinary.Substring(150, 2) + paramBinary.Substring(148, 2) +\r\n                paramBinary.Substring(146, 2) + paramBinary.Substring(144, 2);\r\n            return LastStatus;\r\n        }\r\n        catch (Exception e)\r\n        {\r\n            return "NA";\r\n        }\r\n    }\r\n    public static String GetSequenceNo(String paramBinary)\r\n    {\r\n        try\r\n        {\r\n            String SequenceNo = paramBinary.Substring(158, 2) + paramBinary.Substring(156, 2)\r\n                + paramBinary.Substring(154, 2) + paramBinary.Substring(152, 2);\r\n            return SequenceNo;\r\n        }\r\n        catch (Exception e)\r\n        {\r\n            return "NA";\r\n        }\r\n    }\r\n    public static String GetOffset(String paramBinary)\r\n    {\r\n        try\r\n        {\r\n            String Offset = paramBinary.Substring(174, 2) + paramBinary.Substring(172, 2) +\r\n            paramBinary.Substring(170, 2) + paramBinary.Substring(168, 2) + paramBinary.Substring(166, 2)\r\n             + paramBinary.Substring(164, 2) + paramBinary.Substring(162, 2) + paramBinary.Substring(160, 2);\r\n            return Offset;\r\n        }\r\n        catch (Exception e)\r\n        {\r\n            return "NA";\r\n        }\r\n    }\r\n    public static String GetIoLength(String paramBinary)\r\n    {\r\n        try\r\n        {\r\n            String IoLength = paramBinary.Substring(182, 2) + paramBinary.Substring(180, 2) +\r\n                paramBinary.Substring(178, 2) + paramBinary.Substring(176, 2);\r\n            return IoLength;\r\n        }\r\n        catch (Exception e)\r\n        {\r\n            return "NA";\r\n        }\r\n    }\r\n    public static String GetRecvStatus(String paramBinary)\r\n    {\r\n        try\r\n        {\r\n            String RecvStatus = paramBinary.Substring(190, 2) + paramBinary.Substring(188, 2) +\r\n            paramBinary.Substring(186, 2) + paramBinary.Substring(184, 2);\r\n            return RecvStatus;\r\n        }\r\n        catch (Exception e)\r\n        {\r\n            return "NA";\r\n        }\r\n    }\r\n    public static int GetHttpCode(String paramBinary)\r\n    {\r\n        try\r\n        {\r\n            String HttpCode = paramBinary.Substring(198, 2) + paramBinary.Substring(196, 2)\r\n                + paramBinary.Substring(194, 2) + paramBinary.Substring(192, 2);\r\n            return Convert.ToInt32(HttpCode, 16);\r\n        }\r\n        catch (Exception e)\r\n        {\r\n            return -1;\r\n        }\r\n    }\r\n    public static String GetRetries(String paramBinary)\r\n    {\r\n        try\r\n        {\r\n            String Retries = paramBinary.Substring(200, 2);\r\n            return Retries;\r\n        }\r\n        catch (Exception e)\r\n        {\r\n            return "NA";\r\n        }\r\n    }\r\n    public static String GetFlags(String paramBinary)\r\n    {\r\n        try\r\n        {\r\n            String Flags = paramBinary.Substring(202, 2);\r\n            return Flags;\r\n        }\r\n        catch (Exception e)\r\n        {\r\n            return "NA";\r\n        }\r\n    }\r\n    public static String GetResubmitCount(String paramBinary)\r\n    {\r\n        try\r\n        {\r\n            String ResubmitCount = paramBinary.Substring(2014, 2);\r\n            return ResubmitCount;\r\n        }\r\n        catch (Exception e)\r\n        {\r\n            return "NA";\r\n        }\r\n    }\r\n    public static double GetDuration(DateTime? startTime, DateTime endTime)\r\n    {\r\n        if (startTime == null) return -10000;\r\n        else\r\n        {\r\n            return endTime.Subtract(startTime.Value).TotalMinutes;\r\n        }\r\n    }\r\n    public static double GetNullableDuration(string startTime, DateTime endTime)\r\n    {\r\n        if (startTime == null) return -10000;\r\n        else\r\n        {\r\n            return endTime.Subtract(DateTime.Parse(startTime)).TotalMinutes;\r\n        }\r\n    }\r\n    public static string SplitVhdPath(string vhdpath)\r\n    {\r\n        string[] parts = vhdpath.Split(\'/\');\r\n        if (parts.Length > 3)\r\n            return (parts[2] + "/" + parts[3]);\r\n        else\r\n            return "incorrectly_formatted_path";\r\n    }\r\n\r\n    public static string SplitVhdPathV1(string vhdpath)\r\n    {\r\n        if (string.IsNullOrEmpty(vhdpath))\r\n            return "<nullVhdPath>";\r\n        vhdpath = vhdpath.Split(\'#\')[0];\r\n        string[] parts = vhdpath.Split(\'/\');\r\n        if (parts.Length > 3)\r\n            return string.Join("/", parts, 2, parts.Length - 2);\r\n        else\r\n            return "incorrectly_formatted_path";\r\n    }\r\n\r\n    public static string GetBlob(string VhdPath)\r\n    {\r\n        if (string.IsNullOrEmpty(VhdPath))\r\n            return "<nullBlobPath>";\r\n        string[] splitted = VhdPath.Split(\'/\');\r\n        return splitted[splitted.Length - 1].Split(\'!\')[0];\r\n    }\r\n}\r\n \r\n #ENDCS',
      ADLSubscription: null,
      NebulaParameters: null,
      ProcessingEngine: 1,
      ActivityName: "Data Processing - Cosmos",
      ActivityType: 0,
      Collapsed: false,
    },
  ],
  UserInterfaceSettings: {
    GeneralCollapsed: false,
    AllocationCollapsed: false,
    ScheduleCollapsed: false,
    MointoringCollapsed: false,
    ActivitiesCollapsed: false,
    ParametersCollapsed: false,
    MacrosCollapsed: false,
    LongTermRetriesCollapsed: false,
  },
  Subscription: "AzureAnalytics_Partner_ComputeAnalyticsProd",
};
