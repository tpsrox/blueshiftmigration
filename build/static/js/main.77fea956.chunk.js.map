{"version":3,"sources":["components/stat.jsx","components/statHeader.jsx","components/statStack.jsx","components/dashboard.jsx","components/appHeader.jsx","App.js","serviceWorker.js","index.js"],"names":["Stat","state","isSelected","children","childHierarchy","isLoading","getRequestURI","props","hierarchy","level","data","Id","getChildData","reqUri","setState","fetch","method","rejectUnauthorized","then","response","json","console","log","childData","this","catch","err","getPercentCompleted","Total","Completed","getDueDate","setSelected","val","getChildHierarchy","handleClick","handleToggleMute","hierarchyNames","name","shortName","getStyles","defaultZ","backgroundColor","color","getContact","JSON","parse","Contact","join","Name","ChildrenCount","isMuted","Container","fluid","className","Row","noGutters","Col","onClick","Array","fill","map","v","i","key","icon","faAngleDown","faAngleRight","ProgressBar","now","label","fullHeader","Component","StatHeader","sortField","sortDirection","getHierarchy","handleSort","newSortDir","containerClasses","faLongArrowAltUp","faLongArrowAltDown","Fragment","StatStack","toggleMute","applyClasses","length","stat","id","Dashboard","getJEDIClouds","getSort","componentDidMount","getData","stack","isEquivalent","a","b","aProps","Object","getOwnPropertyNames","bProps","propName","changeSelectedCloud","cloud","clouds","cloudIndex","indexOf","selectedClouds","filter","c","cl","getSelectedClouds","sort","Navbar","Dropdown","as","ButtonGroup","Toggle","Menu","Item","AppHeader","href","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.77fea956.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport Container from \"react-bootstrap/Container\";\nimport Row from \"react-bootstrap/Row\";\nimport Col from \"react-bootstrap/Col\";\nimport ProgressBar from \"react-bootstrap/ProgressBar\";\nimport StatStack from \"./statStack\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faAngleDown } from \"@fortawesome/free-solid-svg-icons\";\nimport { faAngleRight } from \"@fortawesome/free-solid-svg-icons\";\n\nclass Stat extends Component {\n  state = {\n    isSelected: false,\n    children: [],\n    childHierarchy: null,\n    isLoading: false,\n  };\n  getRequestURI = () => {\n    switch (this.props.hierarchy.level) {\n      case 0:\n        return (\n          \"http://192.168.1.248:5555/api/dashboard/getservicegroups?organizationid=\" +\n          this.props.data.Id\n        );\n      case 1:\n        return (\n          \"http://192.168.1.248:5555/api/dashboard/getserviceteams?servicegroupid=\" +\n          this.props.data.Id\n        );\n      case 2:\n        return (\n          \"http://192.168.1.248:5555/api/dashboard/getjobs?serviceteamid=\" +\n          this.props.data.Id\n        );\n      default:\n        break;\n    }\n  };\n  getChildData = () => {\n    let reqUri = this.getRequestURI();\n    this.setState({ isLoading: true });\n    fetch(reqUri, {\n      method: \"GET\",\n      rejectUnauthorized: false,\n    })\n      .then((response) => response.json())\n      .then((response) => {\n        console.log(response);\n\n        this.setState({ childData: response }, function () {\n          this.setState({ isLoading: false });\n        });\n      })\n      .catch((err) => {\n        console.log(err);\n      });\n  };\n  getPercentCompleted = () => {\n    if (this.props.data.Total == 0) {\n      return 0;\n    }\n    const percentCompleted =\n      (this.props.data.Completed / this.props.data.Total) * 100;\n    return percentCompleted;\n  };\n  getDueDate = () => {\n    if (this.props.hierarchy.level >= 2) {\n      return \"08/20/2020\";\n    }\n  };\n  setSelected = (val) => {\n    if (val == null) {\n      return \"incorrect input\";\n    }\n    if (val === true) {\n      let childHierarchy = this.getChildHierarchy(\n        this.props.hierarchy.level + 1\n      );\n\n      this.getChildData();\n\n      this.setState({\n        isSelected: true,\n        childData: [],\n        childHierarchy: childHierarchy,\n      });\n    } else {\n      this.setState({ isSelected: false, childHierarchy: null });\n    }\n    return \"done\";\n  };\n  handleClick = () => {\n    if (this.props.hierarchy.level > 2) {\n      return;\n    }\n    if (this.state.isSelected === true) {\n      this.setSelected(false);\n    } else {\n      this.setSelected(true);\n    }\n    this.props.handleToggleMute();\n  };\n  getChildHierarchy = (level) => {\n    const hierarchyNames = [\n      \"Organization\",\n      \"Service Groups\",\n      \"Service Level\",\n      \"Service Team\",\n      \"Jobs\",\n    ];\n    let cHierarchy = {\n      level: level,\n      name: hierarchyNames[level],\n      shortName: hierarchyNames[level],\n    };\n    return cHierarchy;\n  };\n  getStyles = (level, defaultZ) => {\n    // const bgColors = [\n    //   \"#e6e6e6\",\n    //   \"#ebebeb\",\n    //   \"#f0f0f0\",\n    //   \"#f5f5f5\",\n    //   \"#fafafa\",\n    //   \"#fcfcfc\",\n    //   \"#ffffff\",\n    // ];\n    return {\n      backgroundColor: \"#fff\",\n      color: \"#000\",\n    };\n    // if (this.props.isMuted) {\n    //   return {\n    //     backgroundColor: bgColors[level],\n    //     color: \"#000\",\n    //   };\n    // } else {\n    //   return {\n    //     backgroundColor: \"#fff\",\n    //     color: \"#000\",\n    //   };\n    // }\n  };\n  getContact = () => {\n    try {\n      var json = JSON.parse(this.props.data.Contact);\n      var contact = json.join(\", \");\n      return contact;\n    } catch {\n      return this.props.data.Contact;\n    }\n  };\n  render() {\n    const { Name, Total, Completed, Contact, ChildrenCount } = this.props.data;\n    const { level } = this.props.hierarchy;\n    const { data, isMuted } = this.props;\n    const { isSelected, childData, childHierarchy } = this.state;\n    const { handleClick } = this;\n    return (\n      <Container\n        fluid\n        className=\"px-0 stat-container\"\n        // style={isMuted ? this.getStyles(level) : this.getStyles(level)}\n      >\n        <Row noGutters={true} className=\"stat-row\">\n          <Col\n            className={\"col-3 stat-name px-2 cursor-pointer flex\"}\n            onClick={handleClick}\n          >\n            {Array(level)\n              .fill()\n              .map((v, i) => (\n                <div key={i} className=\"tree-spacer\">\n                  ___\n                </div>\n              ))}\n            <div className=\"stat-name-block\">\n              {isSelected && level <= 2 && (\n                <FontAwesomeIcon\n                  icon={faAngleDown}\n                  className=\"mr-1 stat-arrow-icons\"\n                />\n              )}\n              {!isSelected && level <= 2 && (\n                <FontAwesomeIcon\n                  icon={faAngleRight}\n                  className=\"mr-1 stat-arrow-icons\"\n                />\n              )}\n              {level > 2 && <div className=\"tree-spacer\">___</div>}\n              <span className=\"stat-name-text\">{Name}</span>\n              {level <= 2 && <span>({ChildrenCount})</span>}\n              {this.state.isLoading && <div className=\"sp sp-wave\"></div>}\n            </div>\n          </Col>\n          <Col className=\"stat-graph px-1\">\n            {this.props.hierarchy.level <= 2 && (\n              <ProgressBar\n                now={this.getPercentCompleted()}\n                label={`${this.getPercentCompleted()}%`}\n              />\n            )}\n            {this.props.hierarchy.level == 3 && <span>N/A</span>}\n          </Col>\n          <Col className=\"stat-total px-1\">{this.getDueDate()}</Col>\n          <Col className=\"stat-total px-1\">{Total}</Col>\n          <Col className=\"stat-remaining px-1\">\n            {this.props.hierarchy.level <= 2 && (\n              <span>{Total - Completed}</span>\n            )}\n            {this.props.hierarchy.level == 3 && <span>N/A</span>}\n          </Col>\n          <Col className=\"stat-contact px-1\">{this.getContact()}</Col>\n        </Row>\n        <Row>\n          <Col className=\"col-12\">\n            {isSelected && childHierarchy != null && (\n              <StatStack\n                data={childData}\n                hierarchy={childHierarchy}\n                fullHeader={false}\n              ></StatStack>\n            )}\n          </Col>\n        </Row>\n      </Container>\n    );\n  }\n}\n\nexport default Stat;\n","import React, { Component } from \"react\";\nimport Container from \"react-bootstrap/Container\";\nimport Row from \"react-bootstrap/Row\";\nimport Col from \"react-bootstrap/Col\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faLongArrowAltDown } from \"@fortawesome/free-solid-svg-icons\";\nimport { faLongArrowAltUp } from \"@fortawesome/free-solid-svg-icons\";\n\nclass StatHeader extends Component {\n  state = {\n    sortField: \"none\",\n    sortDirection: \"none\",\n  };\n\n  constructor(props) {\n    super(props);\n  }\n\n  getHierarchy = () => {\n    return this.props.hierarchy.name;\n  };\n  handleSort = (sortField) => {\n    console.log(sortField);\n    if (this.state.sortField === sortField) {\n      let newSortDir = \"\";\n      switch (this.state.sortDirection) {\n        case \"asc\":\n          newSortDir = \"desc\";\n          break;\n        case \"desc\":\n          newSortDir = \"asc\";\n          break;\n        default:\n          newSortDir = \"asc\";\n          break;\n      }\n      this.setState({ sortDirection: newSortDir });\n    } else {\n      this.setState({ sortField: sortField, sortDirection: \"asc\" });\n    }\n  };\n  render() {\n    const { fullHeader } = this.props;\n    const { level } = this.props.hierarchy;\n    const containerClasses =\n      \"px-0 pt-0  text-weight-bold \" +\n      (this.props.fullHeader == true ? \"theme-color \" : \"\");\n    return (\n      <Container fluid className={containerClasses}>\n        <Row className=\"stat-row-header\" noGutters={true}>\n          <Col className={\"flex col-3 stat-name px-1\"}>\n            {Array(level)\n              .fill()\n              .map((v, i) => (\n                <div key={i} className=\"tree-spacer\"></div>\n              ))}\n            <div\n              onClick={() => this.handleSort(\"name\")}\n              className=\"cursor-pointer\"\n            >\n              <span className={fullHeader == true ? \" \" : \"header-title\"}>\n                {this.getHierarchy()}\n              </span>\n              {this.state.sortField === \"name\" &&\n                this.state.sortDirection === \"asc\" && (\n                  <FontAwesomeIcon\n                    icon={faLongArrowAltUp}\n                    className=\"mx-1 sort-icon\"\n                    onClick={() => this.handleSort(\"name\")}\n                  />\n                )}\n              {this.state.sortField === \"name\" &&\n                this.state.sortDirection === \"desc\" && (\n                  <FontAwesomeIcon\n                    icon={faLongArrowAltDown}\n                    className=\"mx-1 sort-icon\"\n                    onClick={() => this.handleSort(\"name\")}\n                  />\n                )}\n            </div>\n          </Col>\n          {fullHeader && (\n            <React.Fragment>\n              <Col className=\"stat-graph px-1\">\n                <div\n                  onClick={() => this.handleSort(\"%completed\")}\n                  className=\"cursor-pointer\"\n                >\n                  <span className=\" \">% Completed</span>\n                  {this.state.sortField === \"%completed\" &&\n                    this.state.sortDirection === \"asc\" && (\n                      <FontAwesomeIcon\n                        icon={faLongArrowAltUp}\n                        className=\"mx-1 sort-icon\"\n                        onClick={() => this.handleSort(\"%completed\")}\n                      />\n                    )}\n                  {this.state.sortField === \"%completed\" &&\n                    this.state.sortDirection === \"desc\" && (\n                      <FontAwesomeIcon\n                        icon={faLongArrowAltDown}\n                        className=\"mx-1 sort-icon\"\n                        onClick={() => this.handleSort(\"%completed\")}\n                      />\n                    )}\n                </div>\n              </Col>\n              <Col className=\"stat-graph px-1\">\n                <div>\n                  <span className=\" \">Due Date</span>\n                </div>\n              </Col>\n              <Col className=\"stat-total px-1\">\n                <div>\n                  <span className=\"\">Total</span>\n                </div>\n              </Col>\n              <Col className=\"stat-remaining px-1\">\n                <div\n                  onClick={() => this.handleSort(\"remaining\")}\n                  className=\"cursor-pointer\"\n                >\n                  <span className=\"\">Remaining</span>\n                  {this.state.sortField === \"remaining\" &&\n                    this.state.sortDirection === \"asc\" && (\n                      <FontAwesomeIcon\n                        icon={faLongArrowAltUp}\n                        className=\"mx-1 sort-icon\"\n                        onClick={() => this.handleSort(\"remaining\")}\n                      />\n                    )}\n                  {this.state.sortField === \"remaining\" &&\n                    this.state.sortDirection === \"desc\" && (\n                      <FontAwesomeIcon\n                        icon={faLongArrowAltDown}\n                        className=\"mx-1 sort-icon\"\n                        onClick={() => this.handleSort(\"remaining\")}\n                      />\n                    )}\n                </div>\n              </Col>\n              <Col className=\"stat-contact px-1\">\n                <div>\n                  <span className=\"\">Contact</span>\n                </div>\n              </Col>\n            </React.Fragment>\n          )}\n        </Row>\n      </Container>\n    );\n  }\n}\n\nexport default StatHeader;\n","import React, { Component } from \"react\";\nimport Stat from \"./stat\";\nimport StatHeader from \"./statHeader\";\n\nclass StatStack extends Component {\n  state = { isMuted: false };\n  toggleMute = () => {\n    console.log(\"handleToggle\");\n    if (this.state.isMuted === true) {\n      this.setState({ isMuted: false });\n    } else {\n      this.setState({ isMuted: true });\n    }\n  };\n  render() {\n    const { hierarchy, data, fullHeader } = this.props;\n    const { isMuted } = this.state;\n    return (\n      <div>\n        {fullHeader && (\n          <StatHeader\n            applyClasses=\"my-2\"\n            hierarchy={hierarchy}\n            fullHeader={fullHeader}\n          ></StatHeader>\n        )}\n        <div>\n          {data != null &&\n            data.length > 0 &&\n            data.map((stat, i) => (\n              <Stat\n                key={\"key-\" + stat.id + \"_\" + i}\n                data={stat}\n                hierarchy={hierarchy}\n                handleToggleMute={this.toggleMute}\n                isMuted={isMuted}\n              ></Stat>\n            ))}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default StatStack;\n","import React, { Component } from \"react\";\nimport StatStack from \"./statStack\";\nimport DropdownButton from \"react-bootstrap/DropdownButton\";\nimport Dropdown from \"react-bootstrap/Dropdown\";\nimport Navbar from \"react-bootstrap/Navbar\";\nimport ButtonGroup from \"react-bootstrap/ButtonGroup\";\nimport Button from \"react-bootstrap/Button\";\n\nclass Dashboard extends Component {\n  constructor() {\n    super();\n    let stack = {\n      id: 0,\n      hierarchy: this.getHierarchy(0),\n      sort: this.getSort(0),\n      data: [],\n    };\n    let clouds = this.getJEDIClouds();\n    this.state = {\n      stack: stack,\n      clouds: clouds,\n    };\n    this.state.selectedClouds = this.getSelectedClouds();\n  }\n  getJEDIClouds = () => {\n    return [\n      { name: \"USSec\", isSelected: true },\n      { name: \"USNat\", isSelected: false },\n      { name: \"Public\", isSelected: false },\n      { name: \"Fairfax\", isSelected: false },\n    ];\n  };\n  getHierarchy = (level) => {\n    const hierarchy = [\n      { name: \"Organization\", level: 0 },\n      { name: \"Service Groups\", level: 1 },\n      { name: \"Service Team\", level: 2 },\n      { name: \"Jobs\", level: 3 },\n    ];\n    return hierarchy[level];\n  };\n  getSort = (level) => {\n    var sort = {};\n  };\n  componentDidMount = () => {\n    this.getData();\n  };\n  getData = () => {\n    fetch(\"http://192.168.1.248:5555/api/dashboard/getorganizations\", {\n      method: \"GET\",\n      rejectUnauthorized: false,\n    })\n      .then((response) => response.json())\n      .then((response) => {\n        let stack = {\n          id: 0,\n          hierarchy: this.getHierarchy(0),\n          data: response,\n        };\n        this.setState({ stack: stack }, function () {});\n      })\n      .catch((err) => {\n        console.log(err);\n      });\n\n    // axios\n    //   .get(`https://localhost:44312/api/dashboard/getorganizations`)\n    //   .then((res) => {\n    //     console.log(res);\n    //   });\n  };\n\n  isEquivalent = (a, b) => {\n    // Create arrays of property names\n    var aProps = Object.getOwnPropertyNames(a);\n    var bProps = Object.getOwnPropertyNames(b);\n\n    // If number of properties is different,\n    // objects are not equivalent\n    if (aProps.length != bProps.length) {\n      return false;\n    }\n\n    for (var i = 0; i < aProps.length; i++) {\n      var propName = aProps[i];\n\n      // If values of same property are not equal,\n      // objects are not equivalent\n      if (a[propName] !== b[propName]) {\n        return false;\n      }\n    }\n\n    // If we made it this far, objects\n    // are considered equivalent\n    return true;\n  };\n  changeSelectedCloud = (cloud) => {\n    console.log(cloud);\n    let clouds = [...this.state.clouds];\n    let cloudIndex = clouds.indexOf(cloud);\n    clouds[cloudIndex] = { ...cloud };\n    if (cloud.isSelected == true) {\n      clouds[cloudIndex].isSelected = false;\n    } else {\n      clouds[cloudIndex].isSelected = true;\n    }\n    var selectedClouds = clouds\n      .filter((c) => {\n        if (c.isSelected == true) {\n          return true;\n        }\n        return false;\n      })\n      .map((cl) => {\n        return cl.name;\n      })\n      .join(\", \");\n    this.setState(\n      { clouds: clouds, selectedClouds: selectedClouds },\n      function () {\n        console.log(this.state);\n      }\n    );\n  };\n  getSelectedClouds = () => {\n    var str = this.state.clouds\n      .filter((c) => {\n        if (c.isSelected == true) {\n          return true;\n        }\n        return false;\n      })\n      .map((cl) => {\n        return cl.name;\n      })\n      .join(\", \");\n    return str;\n  };\n  render() {\n    return (\n      <div className=\"px-0\">\n        <Navbar className=\"justify-content-end\">\n          <div>\n            <div>Migration Status in Cloud</div>\n            <Dropdown as={ButtonGroup} className=\"btn-light\">\n              <Dropdown.Toggle\n                id=\"ddl-dashboard-clouds\"\n                className=\"btn btn-theme\"\n              >\n                {this.state.selectedClouds}\n              </Dropdown.Toggle>\n              <Dropdown.Menu>\n                {this.state.clouds.map((cloud) => (\n                  <Dropdown.Item\n                    key={cloud.name}\n                    className={\n                      \"ddm-clouds-item \" + cloud.isSelected == true\n                        ? \"selected\"\n                        : \"\"\n                    }\n                    onClick={() => this.changeSelectedCloud(cloud)}\n                  >\n                    {cloud.name}\n                  </Dropdown.Item>\n                ))}\n              </Dropdown.Menu>\n            </Dropdown>{\" \"}\n          </div>\n        </Navbar>\n\n        {this.state.stack.data.length > 0 && (\n          <div className=\"mt-2 border-all\">\n            <StatStack\n              key={this.state.stack.id}\n              data={this.state.stack.data}\n              hierarchy={this.state.stack.hierarchy}\n              fullHeader={true}\n            ></StatStack>\n          </div>\n        )}\n      </div>\n    );\n  }\n}\n\nexport default Dashboard;\n","import React, { Component } from \"react\";\n\nclass AppHeader extends Component {\n  state = {};\n  render() {\n    return (\n      <div className=\"d-flex flex-column flex-md-row align-items-center p-3 px-md-4 mb-3 bg-white border-bottom shadow-sm theme-color\">\n        <h5 className=\"my-0 mr-md-auto font-weight-normal\">\n          Blueshift Migration\n        </h5>\n        <nav className=\"my-2 my-md-0 mr-md-3\">\n          <a className=\"p-2 text-light\" href=\"#\">\n            Dashboard\n          </a>\n          <a className=\"p-2 text-light\" href=\"#\">\n            Logged In as:_\n          </a>\n        </nav>\n      </div>\n    );\n  }\n}\n\nexport default AppHeader;\n","import React, { Component } from \"react\";\nimport Dashboard from \"./components/dashboard\";\nimport AppHeader from \"./components/appHeader\";\nimport \"./App.css\";\n\nclass App extends Component {\n  state = {};\n  render() {\n    return (\n      <React.Fragment>\n        <AppHeader></AppHeader>\n        <Dashboard></Dashboard>\n      </React.Fragment>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"./index.css\";\n\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}